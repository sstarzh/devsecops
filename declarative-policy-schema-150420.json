{
   "$id" : "schema.policy.json",
   "$schema" : "http://json-schema.org/draft-07/schema#",
   "properties" : {
      "antivirus" : {
         "properties" : {
            "inspectHttpUploads" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "applicationLanguage" : {
         "enum" : [
            "windows-874",
            "utf-8",
            "koi8-r",
            "windows-1253",
            "iso-8859-10",
            "gbk",
            "windows-1256",
            "windows-1250",
            "iso-8859-13",
            "iso-8859-9",
            "windows-1251",
            "iso-8859-6",
            "big5",
            "gb2312",
            "iso-8859-1",
            "windows-1252",
            "iso-8859-4",
            "iso-8859-2",
            "iso-8859-3",
            "gb18030",
            "iso-8859-8",
            "shift_jis",
            "euc-kr",
            "iso-8859-5",
            "iso-8859-7",
            "windows-1255",
            "euc-jp",
            "iso-8859-15",
            "windows-1257",
            "iso-8859-16",
            "auto-detect"
         ],
         "type" : "string"
      },
      "behavioral-enforcement" : {
         "properties" : {
            "enableBehavioralEnforcement" : {
               "type" : "boolean"
            },
            "enableBlockingCveSignatures" : {
               "type" : "boolean"
            },
            "enableBlockingHighAccuracySignatures" : {
               "type" : "boolean"
            },
            "enableBlockingLikelyMaliciousTransactions" : {
               "type" : "boolean"
            },
            "enableBlockingSuspiciousTransactions" : {
               "type" : "boolean"
            },
            "enableBlockingViolations" : {
               "type" : "boolean"
            },
            "violationReferences" : {
               "items" : {
                  "properties" : {
                     "name" : {
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "name"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            }
         },
         "type" : "object"
      },
      "blocking-settings" : {
         "properties" : {
            "evasions" : {
               "items" : {
                  "description" : "This section defines behavior of 'Evasion technique detected' (VIOL_EVASION) violation subviolations.\nUser can control which subviolations are enabled (alarmed/blocked) and/or learned.\nBehavior of subviolations depends on the block/alarm/learn settings of 'Evasion technique detected' violation,\ndefined in /policy/blocking-settings/violations section:\n - If learn is disabled in violation - no learning will be done for subviolations\n - If both alarm and block are disabled - enable flag becomes irrelevant, since there will be no block/alarm for all subviolations",
                  "properties" : {
                     "description" : {
                        "description" : "Human-readable name of subviolation.",
                        "enum" : [
                           "IIS Unicode codepoints",
                           "IIS backslashes",
                           "Apache whitespace",
                           "Bare byte decoding",
                           "Bad unescape",
                           "Directory traversals",
                           "%u decoding",
                           "Multiple decoding"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "description" : "Defines if subviolation is enforced - alarmed or blocked, according to the 'Evasion technique detected' (VIOL_EVASION) violation blocking settings.",
                        "type" : "boolean"
                     },
                     "learn" : {
                        "description" : "Defines if subviolation is learned. Subviolations are learned only when learn is enabled for the 'Evasion technique detected' (VIOL_EVASION) violation.",
                        "type" : "boolean"
                     },
                     "maxDecodingPasses" : {
                        "description" : "Defines how many times the system decodes URI and parameter values before the request is considered an evasion.\nRelevant only for the 'Multiple decoding' subviolation.",
                        "type" : "integer"
                     }
                  },
                  "required" : [
                     "description"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            },
            "general" : {
               "description" : "This section includes several advanced policy configuration settings.",
               "properties" : {
                  "enablePassiveMode" : {
                     "type" : "boolean"
                  },
                  "enforcementMode" : {
                     "enum" : [
                        "blocking",
                        "transparent"
                     ],
                     "type" : "string"
                  }
               },
               "type" : "object"
            },
            "http-protocols" : {
               "items" : {
                  "description" : "This section defines behavior of 'HTTP protocol compliance failed' (VIOL_HTTP_PROTOCOL) violation subviolations.\nUser can control which subviolations are enabled (alarmed/blocked) and/or learned.\nBehavior of subviolations depends on the block/alarm/learn settings of 'HTTP protocol compliance failed' violation,\ndefined in /policy/blocking-settings/violations section:\n - If learn is disabled in violation - no learning will be done for subviolations\n - If both alarm and block are disabled - enable flag becomes irrelevant, since there will be no block/alarm for all subviolations",
                  "properties" : {
                     "description" : {
                        "description" : "Human-readable name of subviolation",
                        "enum" : [
                           "Unparsable request content",
                           "No Host header in HTTP/1.1 request",
                           "Check maximum number of parameters",
                           "Bad host header value",
                           "CRLF characters before request start",
                           "Bad HTTP version",
                           "Body in GET or HEAD requests",
                           "POST request with Content-Length: 0",
                           "Content length should be a positive number",
                           "Multiple host headers",
                           "High ASCII characters in headers",
                           "Chunked request with Content-Length header",
                           "Check maximum number of headers",
                           "Several Content-Length headers",
                           "Bad multipart/form-data request parsing",
                           "Header name with no header value",
                           "Bad multipart parameters parsing",
                           "Null in request",
                           "Host header contains IP address"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "description" : "Defines if subviolation is enforced - alarmed or blocked, according to the 'HTTP protocol compliance failed' (VIOL_HTTP_PROTOCOL) violation blocking settings",
                        "type" : "boolean"
                     },
                     "learn" : {
                        "description" : "Defines if subviolation is learned. Subviolations is learned only when learn is enabled for the 'HTTP protocol compliance failed' (VIOL_HTTP_PROTOCOL) violation",
                        "type" : "boolean"
                     },
                     "maxHeaders" : {
                        "description" : "Defines maximum allowed number of headers in request.\nRelevant only for the 'Check maximum number of headers' subviolation",
                        "type" : "integer"
                     },
                     "maxParams" : {
                        "description" : "Defines maximum allowed number of paramters in request.\nRelevant only for the 'Check maximum number of parameters' subviolation",
                        "type" : "integer"
                     }
                  },
                  "required" : [
                     "description"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            },
            "violations" : {
               "items" : {
                  "properties" : {
                     "alarm" : {
                        "type" : "boolean"
                     },
                     "block" : {
                        "type" : "boolean"
                     },
                     "description" : {
                        "type" : "string"
                     },
                     "learn" : {
                        "type" : "boolean"
                     },
                     "name" : {
                        "type" : "string"
                     }
                  },
                  "type" : "object"
               },
               "type" : "array"
            },
            "web-services-securities" : {
               "items" : {
                  "properties" : {
                     "description" : {
                        "enum" : [
                           "Malformed Error",
                           "Expired Timestamp",
                           "Certificate Expired",
                           "Timestamp expiration is too far in the future",
                           "Certificate Error",
                           "UnSigned Timestamp",
                           "Invalid Timestamp",
                           "Verification Error",
                           "Decryption Error",
                           "Internal Error",
                           "Missing Timestamp",
                           "Signing Error",
                           "Encryption Error"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "type" : "boolean"
                     },
                     "learn" : {
                        "type" : "boolean"
                     }
                  },
                  "required" : [
                     "description"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            }
         },
         "type" : "object"
      },
      "brute-force-attack-preventions" : {
         "items" : {
            "properties" : {
               "bruteForceProtectionForAllLoginPages" : {
                  "type" : "boolean"
               },
               "captchaBypassCriteria" : {
                  "properties" : {
                     "action" : {
                        "enum" : [
                           "alarm-and-drop",
                           "alarm-and-blocking-page",
                           "alarm-and-honeypot-page"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "type" : "boolean"
                     },
                     "threshold" : {
                        "type" : "integer"
                     }
                  },
                  "type" : "object"
               },
               "clientSideIntegrityBypassCriteria" : {
                  "properties" : {
                     "action" : {
                        "enum" : [
                           "alarm-and-captcha"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "type" : "boolean"
                     },
                     "threshold" : {
                        "type" : "integer"
                     }
                  },
                  "type" : "object"
               },
               "detectionCriteria" : {
                  "properties" : {
                     "action" : {
                        "enum" : [
                           "alarm-and-client-side-integrity",
                           "alarm",
                           "alarm-and-captcha",
                           "alarm-and-client-side-integrity-captcha"
                        ],
                        "type" : "string"
                     },
                     "credentialsStuffingMatchesReached" : {
                        "type" : "integer"
                     },
                     "detectCredentialsStuffingAttack" : {
                        "type" : "boolean"
                     },
                     "detectDistributedBruteForceAttack" : {
                        "type" : "boolean"
                     },
                     "failedLoginAttemptsRateReached" : {
                        "type" : "integer"
                     }
                  },
                  "type" : "object"
               },
               "leakedCredentialsCriteria" : {
                  "properties" : {
                     "action" : {
                        "enum" : [
                           "alarm-and-blocking-page",
                           "alarm",
                           "alarm-and-honeypot-page",
                           "alarm-and-leaked-credentials-response-page"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "type" : "boolean"
                     }
                  },
                  "type" : "object"
               },
               "loginAttemptsFromTheSameDeviceId" : {
                  "properties" : {
                     "action" : {
                        "enum" : [
                           "alarm-and-client-side-integrity",
                           "alarm-and-drop",
                           "alarm-and-blocking-page",
                           "alarm",
                           "alarm-and-captcha",
                           "alarm-and-honeypot-page"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "type" : "boolean"
                     },
                     "threshold" : {
                        "type" : "integer"
                     }
                  },
                  "type" : "object"
               },
               "loginAttemptsFromTheSameIp" : {
                  "properties" : {
                     "action" : {
                        "enum" : [
                           "alarm-and-client-side-integrity",
                           "alarm-and-drop",
                           "alarm-and-blocking-page",
                           "alarm",
                           "alarm-and-captcha",
                           "alarm-and-honeypot-page"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "type" : "boolean"
                     },
                     "threshold" : {
                        "type" : "integer"
                     }
                  },
                  "type" : "object"
               },
               "loginAttemptsFromTheSameUser" : {
                  "properties" : {
                     "action" : {
                        "enum" : [
                           "alarm-and-client-side-integrity",
                           "alarm",
                           "alarm-and-captcha"
                        ],
                        "type" : "string"
                     },
                     "enabled" : {
                        "type" : "boolean"
                     },
                     "threshold" : {
                        "type" : "integer"
                     }
                  },
                  "type" : "object"
               },
               "measurementPeriod" : {
                  "type" : "integer"
               },
               "preventionDuration" : {
                  "type" : "string"
               },
               "reEnableLoginAfter" : {
                  "type" : "integer"
               },
               "sourceBasedProtectionDetectionPeriod" : {
                  "type" : "integer"
               },
               "urlReference" : {
                  "$ref" : "#/properties/urls/items",
                  "type" : "object"
               }
            },
            "type" : "object"
         },
         "type" : "array"
      },
      "caseInsensitive" : {
         "type" : "boolean"
      },
      "cookie-settings" : {
         "properties" : {
            "maximumCookieHeaderLength" : {
               "type" : "string"
            }
         },
         "type" : "object"
      },
      "cookies" : {
         "items" : {
            "description" : "This section defines Cookie entities for your policy.\nYou can specify the cookies that you want to allow, and the ones you want to enforce in a security policy:\n- **Allowed cookies**: The system allows these cookies and clients can change them.\n- **Enforced cookies**: The system enforces the cookies in the list\n  (not allowing clients to change them) and allows clients to change all others.",
            "properties" : {
               "accessibleOnlyThroughTheHttpProtocol" : {
                  "description" : "Specifies, when true, that the system adds the HttpOnly attribute to the domain cookie\u2019s response header.\nThis is done to expose the cookie to only HTTP and HTTPS entities.\nThis prevents the cookie from being modified, or intercepted even if it is not modified,\nby unwanted third parties that run scripts on the web page.\n\n**Note**: The system does not validate that the cookie has not been modified or intercepted.\n**Note**: The feature covers all security policy cookies, both enforced and allowed, explicit and wildcard.",
                  "type" : "boolean"
               },
               "attackSignaturesCheck" : {
                  "description" : "Specifies, when true, that you want attack signatures and threat campaigns to be detected on this cookie\nand possibly override the security policy settings of an attack signature or threat campaign specifically for this cookie.\nAfter you enable this setting, the system displays a list of attack signatures and threat campaigns.",
                  "type" : "boolean"
               },
               "enforcementType" : {
                  "description" : "Specifies how the system treats this cookie.\n- **Enforced**: Specifies that according to the security policy, this cookie may not be changed by the client.\n- **Allowed**: Specifies that according to the security policy, this cookie may be changed by the client.\n  The system ignores this cookie.",
                  "enum" : [
                     "enforce",
                     "allow"
                  ],
                  "type" : "string"
               },
               "insertSameSiteAttribute" : {
                  "description" : "The introduction of the SameSite http attribute (defined in [RFC6265bis](https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00))\nallows you to declare if your cookie should be restricted to a first-party or same-site context.\nIntroducing the SameSite attribute on a cookie provides three different ways of controlling same-site vs. cross-site cookie sending:\n- **strict**: Cookie will only be sent in a first-party context.\n  In user terms, the cookie will only be sent if the site for the cookie matches the site currently shown in the browser's URL bar.\n- **lax**: Cookies will be sent with top level navigation\n- **none**: Cookies will be sent in a third-party context.",
                  "enum" : [
                     "none",
                     "lax",
                     "strict",
                     "none-value"
                  ],
                  "type" : "string"
               },
               "isBase64" : {
                  "description" : "You can enable the security policy to check whether cookie values contain a Base64 encoded string.\nIf the value is indeed Base64 encoded, the system decodes this value and continues with its security checks.\nSpecifies, when true, that the security policy checks the cookie\u2019s value for Base64 encoding, and decodes the value.\n\n**Note**: This setting is only available if Cookie Type is set to Allowed.",
                  "type" : "boolean"
               },
               "maskValueInLogs" : {
                  "description" : "Specifies, when true, that the cookie's value will be masked in the request log",
                  "type" : "boolean"
               },
               "name" : {
                  "description" : "Specifies the cookie name as appearing in the http cookie header.\nThe cookie name length is limited to 500 characters.\n\nNames can be one of the following according to the *type* attribute:\n- **Explicit**: Specifies that the cookie has a specific name and is not a wildcard entity.\n  Type the name of a cookie exactly as you expect it to appear in the request.\n- **Wildcard**: Specifies that any cookie that matches the listed wildcard expression should be treated\n  according to the wildcard attributes. Type a wildcard expression that matches the expected cookie.\n  For example, the wildcard expression cookie_12* of type Enforced specifies that the security policy\n  should not allow modified domain cookies for all cookies which match cookie_12*.\n\nThe syntax for wildcard entities is based on shell-style wildcard characters.\nThis table lists the wildcard characters that you can use so that the entity name can match multiple objects.\n\n  | Wildcard Character | Matches                              |\n  |--------------------+--------------------------------------|\n  | *                  | All characters                       |\n  | ?                  | Any single character                 |\n  | [abcde]            | Exactly one of the characters listed |\n  | [!abcde]           | Any character not listed             |\n  | [a-e]              | Exactly one character in the range   |\n  | [!a-e]             | Any character not in the range       |\n\n**Note**: Wildcards do not match regular expressions. Do not use a regular expression as a wildcard.",
                  "type" : "string"
               },
               "securedOverHttpsConnection" : {
                  "description" : "Specifies, when true, that the system adds the Secure attribute to the domain cookie\u2019s response header.\nThis is done to ensure that the cookies are returned to the server only over SSL (by using the HTTPS protocol).\nThis prevents the cookie from being intercepted, but does not guarantee its integrity.\n\n**Note**: The system does not validate that the cookie was received over SSL.\n**Note**: The feature covers all security policy cookies, both enforced and allowed, explicit and wildcard.",
                  "type" : "boolean"
               },
               "signatureOverrides" : {
                  "description" : "Array of signature overrides.\nSpecifies attack signatures whose security policy settings are overridden for this cookie,\nand which action the security policy takes when it discovers a request for this cookie that matches these attack signatures.",
                  "items" : {
                     "properties" : {
                        "enabled" : {
                           "description" : "Specifies, when true, that the overridden signature is enforced",
                           "type" : "boolean"
                        },
                        "signatureId" : {
                           "description" : "signature id",
                           "type" : "integer"
                        }
                     },
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "type" : {
                  "description" : "Determines the type of the **name** attribute.\nOnly when setting the type to wildcard will the special wildcard characters in the name interpreted as such.",
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "csrf-protection" : {
         "properties" : {
            "enabled" : {
               "type" : "boolean"
            },
            "expirationTimeInSeconds" : {
               "type" : "string"
            },
            "sslOnly" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "csrf-urls" : {
         "items" : {
            "properties" : {
               "enforcementAction" : {
                  "enum" : [
                     "none",
                     "verify-csrf-token",
                     "verify-origin"
                  ],
                  "type" : "string"
               },
               "method" : {
                  "enum" : [
                     "POST",
                     "GET",
                     "any"
                  ],
                  "type" : "string"
               },
               "parametersList" : {
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "requiredParameters" : {
                  "enum" : [
                     "ignore",
                     "at-least-one",
                     "from-parameters-list"
                  ],
                  "type" : "string"
               },
               "url" : {
                  "type" : "string"
               }
            },
            "required" : [
               "url"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "data-guard" : {
         "description" : "Data Guard feature can prevent responses from exposing sensitive information by masking the data.",
         "properties" : {
            "creditCardNumbers" : {
               "description" : "If *true* the system considers credit card numbers as sensitive data.",
               "type" : "boolean"
            },
            "customPatterns" : {
               "description" : "If *true* the system recognizes customized patterns as sensitive data.",
               "type" : "boolean"
            },
            "customPatternsList" : {
               "description" : "List of PCRE regular expressions that specify the sensitive data patterns.",
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            },
            "enabled" : {
               "description" : "If *true* the system protects sensitive data.",
               "type" : "boolean"
            },
            "enforcementMode" : {
               "description" : "Specifies the URLs for which the system enforces data guard protection.\n- **ignore-urls-in-list**: Specifies that the system enforces data guard protection for all URLs except for those URLs in the Enforcement Mode list.\n- **enforce-urls-in-list**: Specifies that the system enforces data guard protection only for those URLs in the Enforcement Mode list",
               "enum" : [
                  "enforce-urls-in-list",
                  "ignore-urls-in-list"
               ],
               "type" : "string"
            },
            "enforcementUrls" : {
               "description" : "List of URLS to be enforced based on enforcement mode of data guard protection.",
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            },
            "exceptionPatterns" : {
               "description" : "If *true* the system recognizes exception patterns as not being sensitive data.",
               "type" : "boolean"
            },
            "exceptionPatternsList" : {
               "description" : "List of PCRE regular expressions that specify the data patterns that are not recognized as sensitive data.",
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            },
            "fileContentDetection" : {
               "description" : "If *true* the system checks responses for file content.",
               "type" : "boolean"
            },
            "fileContentDetectionFormatReferences" : {
               "items" : {
                  "properties" : {
                     "name" : {
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "name"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            },
            "lastCcnDigitsToExpose" : {
               "description" : "Specifies the number of last digits in credit card numbers that are are exposed.",
               "type" : "integer"
            },
            "lastSsnDigitsToExpose" : {
               "description" : "Specifies the number of last digits in U.S Social Security numbers that are are exposed.",
               "type" : "integer"
            },
            "maskData" : {
               "description" : "If *true* the system intercepts the returned responses to mask sensitive data.",
               "type" : "boolean"
            },
            "usSocialSecurityNumbers" : {
               "description" : "If *true* the system considers U.S Social Security numbers as sensitive data.",
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "database-protection" : {
         "properties" : {
            "databaseProtectionEnabled" : {
               "type" : "boolean"
            },
            "userSource" : {
               "enum" : [
                  "apm",
                  "login-pages"
               ],
               "type" : "string"
            }
         },
         "type" : "object"
      },
      "deception-response-pages" : {
         "items" : {
            "properties" : {
               "responseBody" : {
                  "type" : "string"
               },
               "responseHeaders" : {
                  "type" : "string"
               },
               "responseStatusCode" : {
                  "type" : "string"
               }
            },
            "required" : [
               "responseStatusCode"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "deception-settings" : {
         "properties" : {
            "enableCustomResponses" : {
               "type" : "boolean"
            },
            "enableResponsePageByAttackType" : {
               "type" : "boolean"
            },
            "responseStatusCodes" : {
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            },
            "serverTechnologyName" : {
               "type" : "string"
            }
         },
         "type" : "object"
      },
      "description" : {
         "type" : "string"
      },
      "disabled-action-items" : {
         "items" : {
            "properties" : {
               "type" : {
                  "enum" : [
                     "parameter-staging",
                     "filetype-staging",
                     "url-staging",
                     "transparent-policy",
                     "cookie-staging",
                     "default-parameter",
                     "scanner-vulnerabilities",
                     "signature-staging",
                     "modified-policy",
                     "policy-validation",
                     "threat-campaign-staging",
                     "websocket-url-staging"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "type"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "disallowed-geolocations" : {
         "items" : {
            "properties" : {
               "countryCode" : {
                  "type" : "string"
               },
               "countryName" : {
                  "enum" : [
                     "N/A",
                     "Sweden",
                     "Tuvalu",
                     "Nepal",
                     "Tonga",
                     "Anguilla",
                     "Guinea",
                     "Libyan Arab Jamahiriya",
                     "Somalia",
                     "Korea, Republic of",
                     "Nauru",
                     "Holy See (Vatican City State)",
                     "Mozambique",
                     "Guyana",
                     "Ethiopia",
                     "Equatorial Guinea",
                     "South Africa",
                     "Virgin Islands, U.S.",
                     "Indonesia",
                     "Peru",
                     "France, Metropolitan",
                     "Argentina",
                     "Aland Islands",
                     "Cook Islands",
                     "Portugal",
                     "Nigeria",
                     "Solomon Islands",
                     "Latvia",
                     "Dominican Republic",
                     "Antigua and Barbuda",
                     "Turkey",
                     "Serbia",
                     "Morocco",
                     "Tunisia",
                     "Malawi",
                     "Faroe Islands",
                     "Cayman Islands",
                     "Maldives",
                     "Mauritius",
                     "Bangladesh",
                     "Palestinian Territory",
                     "South Georgia and the South Sandwich Islands",
                     "Brazil",
                     "Netherlands",
                     "Japan",
                     "Paraguay",
                     "Ecuador",
                     "Moldova, Republic of",
                     "Croatia",
                     "Mali",
                     "Jamaica",
                     "Swaziland",
                     "Dominica",
                     "Slovenia",
                     "Israel",
                     "Botswana",
                     "Madagascar",
                     "India",
                     "Belize",
                     "Namibia",
                     "Malta",
                     "Algeria",
                     "Syrian Arab Republic",
                     "Saint Pierre and Miquelon",
                     "American Samoa",
                     "Taiwan",
                     "Micronesia, Federated States of",
                     "Russian Federation",
                     "Antarctica",
                     "Azerbaijan",
                     "Macau",
                     "Bulgaria",
                     "Northern Mariana Islands",
                     "Lebanon",
                     "Iraq",
                     "Thailand",
                     "Christmas Island",
                     "Saint Martin",
                     "Guernsey",
                     "Barbados",
                     "United Arab Emirates",
                     "Belarus",
                     "Singapore",
                     "Niger",
                     "Vietnam",
                     "Ukraine",
                     "Saint Kitts and Nevis",
                     "Cote D'Ivoire",
                     "Romania",
                     "Cameroon",
                     "Greece",
                     "Cocos (Keeling) Islands",
                     "Grenada",
                     "Germany",
                     "San Marino",
                     "Mayotte",
                     "Belgium",
                     "Burkina Faso",
                     "Monaco",
                     "Chile",
                     "Other",
                     "French Guiana",
                     "United States",
                     "Uzbekistan",
                     "Wallis and Futuna",
                     "Heard Island and McDonald Islands",
                     "Haiti",
                     "Costa Rica",
                     "France",
                     "Kiribati",
                     "Bouvet Island",
                     "Comoros",
                     "Malaysia",
                     "Guam",
                     "Cambodia",
                     "British Indian Ocean Territory",
                     "Samoa",
                     "Panama",
                     "Rwanda",
                     "Benin",
                     "Uruguay",
                     "Puerto Rico",
                     "Mongolia",
                     "Netherlands Antilles",
                     "Hungary",
                     "Zambia",
                     "Saint Lucia",
                     "Trinidad and Tobago",
                     "Liechtenstein",
                     "Pakistan",
                     "Hong Kong",
                     "Sri Lanka",
                     "Suriname",
                     "China",
                     "French Southern Territories",
                     "Gibraltar",
                     "Sierra Leone",
                     "Estonia",
                     "Western Sahara",
                     "Congo",
                     "Eritrea",
                     "Angola",
                     "Guatemala",
                     "Armenia",
                     "Virgin Islands, British",
                     "Saudi Arabia",
                     "Guinea-Bissau",
                     "Oman",
                     "Turkmenistan",
                     "Honduras",
                     "Guadeloupe",
                     "Ireland",
                     "Vanuatu",
                     "Nicaragua",
                     "Qatar",
                     "Tokelau",
                     "Czech Republic",
                     "Central African Republic",
                     "Saint Barthelemy",
                     "Iceland",
                     "Ghana",
                     "French Polynesia",
                     "Mexico",
                     "Bahamas",
                     "Djibouti",
                     "Niue",
                     "Svalbard and Jan Mayen",
                     "Korea, Democratic People's Republic of",
                     "Saint Helena",
                     "El Salvador",
                     "United States Minor Outlying Islands",
                     "Iran, Islamic Republic of",
                     "Jersey",
                     "Brunei Darussalam",
                     "Slovakia",
                     "Lao People's Democratic Republic",
                     "Tajikistan",
                     "Turks and Caicos Islands",
                     "Poland",
                     "Aruba",
                     "Togo",
                     "Cuba",
                     "Gabon",
                     "Kenya",
                     "Spain",
                     "Egypt",
                     "Bolivia",
                     "Australia",
                     "Macedonia",
                     "Falkland Islands (Malvinas)",
                     "Switzerland",
                     "United Kingdom",
                     "Congo, The Democratic Republic of the",
                     "Anonymous Proxy",
                     "Satellite Provider",
                     "Lithuania",
                     "Norway",
                     "Montserrat",
                     "Marshall Islands",
                     "Canada",
                     "Montenegro",
                     "Pitcairn Islands",
                     "Cyprus",
                     "Luxembourg",
                     "Papua New Guinea",
                     "Bermuda",
                     "Mauritania",
                     "Kyrgyzstan",
                     "Martinique",
                     "Seychelles",
                     "Finland",
                     "Palau",
                     "Chad",
                     "Austria",
                     "Kazakhstan",
                     "Fiji",
                     "Lesotho",
                     "Jordan",
                     "Cape Verde",
                     "Italy",
                     "Philippines",
                     "Uganda",
                     "Zimbabwe",
                     "Bhutan",
                     "Tanzania, United Republic of",
                     "Sao Tome and Principe",
                     "New Zealand",
                     "Saint Vincent and the Grenadines",
                     "Yemen",
                     "Colombia",
                     "Liberia",
                     "Gambia",
                     "Myanmar",
                     "Bahrain",
                     "Burundi",
                     "Reunion",
                     "Bosnia and Herzegovina",
                     "Timor-Leste",
                     "Isle of Man",
                     "Kuwait",
                     "Venezuela",
                     "Georgia",
                     "New Caledonia",
                     "Afghanistan",
                     "Sudan",
                     "Greenland",
                     "Denmark",
                     "Andorra",
                     "Senegal",
                     "Norfolk Island",
                     "Albania"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "countryName"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "enablePassiveMode" : {
         "type" : "boolean"
      },
      "enforcementMode" : {
         "enum" : [
            "transparent",
            "blocking"
         ],
         "type" : "string"
      },
      "filetypes" : {
         "items" : {
            "description" : "File types are categorization of the URLs in the request by the extension appearing past the last dot at the end of the URL. For example, the file type of /index.php\nis \"php\". Other well known file types are html, aspx, png, jpeg and many more. A special case is the \"empty\" file type called \"no-ext\" meaning, no extension in which the URL has no dot at its last segment as in /foo_no_dot\n\nFile types usually imply the expected content type in the response. For example, html and php return HTML content, while jpeg, png and gif return images, each in its respective format. File types also imply the server technology deployed for rendering the page. For example, php (PHP), aspx (ASP) and many others.\n\nThe security policy uses file types for several purposes:\n1. Ability to define which file types are allowed and which are disallowed. By including the pure wildcard \"\\*\" file type and a list of disallowed file types you have a file type blacklist.\nBy having a list of explicit file type *without* the pure wildcard \"\\*\" you have a file type whitelist.\n2. Each file type implies maximum *length resrictions* for the requests of that file type. The checked lengths are per the URL, Query String, total request length and payload (POST data).\n3. Each file type determines whether to detect *response signatures* for requests of that file type. Typically, one would never check signatures for image file types.",
            "properties" : {
               "allowed" : {
                  "description" : "Determines whether the file type is allowed or disallowed. In either of these cases the VIOL_FILETYPE violation is issued (if enabled) for an incoming request-\n1. No allowed file type matched the file type of the request.\n2. The file type of the request matched a disallowed file type.",
                  "type" : "boolean"
               },
               "checkPostDataLength" : {
                  "description" : "Determines whether to enforce maximum length restriction for the body, a.k.a. \"POST data\" part of the requests that match the respective file type. The maximum length is determined by *postDataLength* attribute.\nAlthough named \"POST data\", this applies to any content type and not restricted to POST requests, e.g. PUT requests are also checked.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "boolean"
               },
               "checkQueryStringLength" : {
                  "description" : "Determines whether to enforce maximum length restriction for the query string of the requests that match the respective file type. The maximum length is determined by *queryStringLength* attribute.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "boolean"
               },
               "checkRequestLength" : {
                  "description" : "Determines whether to enforce maximum length restriction for the total length of requests that match the respective file type. The maximum length is determined by *requestLength* attribute.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "boolean"
               },
               "checkUrlLength" : {
                  "description" : "Determines whether to enforce maximum length restriction for the URL of the requests that match the respective file type. The URL does *not* include the query string, past the &. The maximum length is determined by *urlLength* attribute.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "boolean"
               },
               "name" : {
                  "description" : "Specifies the file type name as appearing in the URL extension. Names can be one of the following according to the *type* attribute:\n\n- **Explicit** - Specifies that the name is the liternal file extension to which the file type refers. The *type* attribute has to be \"explicit\".\n- **No Extension** - Specifies the empty file type, lacking file extension. For this the reserved string **no_ext** should be used. The *type* attribute has to be \"explicit\".\n- **Wildcard** - Specifies that any file extension that matches the wildcard expression is matched to this file type in the policy. The *type* attribute has to be \"wildcard\".\n\nThe syntax for wildcard entities is based on shell-style wildcard characters. This table lists the wildcard characters that you can use so that the entity name can match multiple objects.\n\n| Wildcard Character | Matches                              |\n|--------------------+--------------------------------------|\n| *                  | All characters                       |\n| ?                  | Any single character                 |\n| [abcde]            | Exactly one of the characters listed |\n| [!abcde]           | Any character not listed             |\n| [a-e]              | Exactly one character in the range   |\n| [!a-e]             | Any character not in the range       |\n\n**Note**: Wildcards do not match regular expressions. Do not use a regular expression as a wildcard.",
                  "type" : "string"
               },
               "postDataLength" : {
                  "description" : "The maximum length in bytes of the body (POST data) of the request matching the file type. Enforced only if checkPostDataLength is set to *true*.\nIf the value is exceeded then VIOL_POST_DATA_LENGTH violation is issued.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "integer"
               },
               "queryStringLength" : {
                  "description" : "The maximum length in bytes of the query string of the request matching the file type. Enforced only if checkQueryStringLength is set to *true*.\nIf the value is exceeded then VIOL_QUERY_STRING_LENGTH violation is issued.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "integer"
               },
               "requestLength" : {
                  "description" : "The maximum total length in bytes of the request matching the file type. Enforced only if checkRequestLength is set to *true*.\nIf the value is exceeded then VIOL_REQUEST_LENGTH violation is issued.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "integer"
               },
               "responseCheck" : {
                  "description" : "Determines whether the responses to requests that match the respective file types are inspected for attack signature detection.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "boolean"
               },
               "type" : {
                  "description" : "Determines the type of the **name** attribute. Only when setting the type to wildcard will the special wildcard characters in the name interpreted as such.",
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               },
               "urlLength" : {
                  "description" : "The maximum length in bytes of the URL of the request matching the file type, excluding the query string. Enforced only if checkUrlLength is set to *true*.\nIf the value is exceeded then VIOL_URL_LENGTH violation is issued.\nThis attribute is relevant only to *allowed* file types.",
                  "type" : "integer"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "fullPath" : {
         "type" : "string"
      },
      "general" : {
         "description" : "This section includes several advanced policy configuration settings.",
         "properties" : {
            "allowedResponseCodes" : {
               "description" : "You can specify which responses a security policy permits.\nBy default, the system accepts all response codes from 100 to 399 as valid responses.\nResponse codes from 400 to 599 are considered invalid unless added to the Allowed Response Status Codes list.\nBy default, 400, 401, 404, 407, 417, and 503 are on the list as allowed HTTP response status codes.",
               "items" : {
                  "type" : "integer"
               },
               "type" : "array"
            },
            "customXffHeaders" : {
               "description" : "If you require the system to trust a server further than one hop toward the client (the last proxy traversed), you can use the Custom XFF Headers setting to define a specific header that is inserted closer to, or at the client, that the system will trust.\nAdditionally, if you require the system to trust a proxy server that uses a different header name than the X-Forwarded-For header name, you can add the desired header name to the Custom XFF Headers setting.\nWhen adding a custom header, the X-Forwarded-For header is not trusted anymore. In case the X-Forwarded-For header is to be trusted along with other headers, you must add it to the custom headers list.",
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            },
            "dynamicSessionIdDescription" : {
               "description" : "A description of user-defined regular expression that the security policy uses to recognize dynamic sessions in URLs.",
               "type" : "string"
            },
            "dynamicSessionIdInUrl" : {
               "description" : "A user-defined regular expression that the security policy uses to recognize dynamic sessions in URLs.",
               "type" : "string"
            },
            "enableEventCorrelation" : {
               "description" : "This feature designed to provide an aggregated view of security events in the Configuration utility.\nWhen two or more illegal requests are sent to the web application within a short period of time, the system correlates them as a security event.\nFor example, the system aggregates requests into a single event if a single user causes multiple violations over time.\nWhen enabled, Event Correlation Reporting logs are collected.",
               "type" : "boolean"
            },
            "enforcementReadinessPeriod" : {
               "description" : "For each security policy, you can configure the number of days used as the enforcement readiness period, also called staging.\nSecurity policy entities and attack signatures remain in staging for this period of time before the system suggests that you enforce them.\nStaging allows you to test security policy entities and attack signatures for false positives without enforcing them.\nThe default value of 7 days works for most situations so you typically do not need to change it.",
               "type" : "integer"
            },
            "maskCreditCardNumbersInRequest" : {
               "description" : "When enabled, the security policy masks credit card numbers that appear in any part of requests. The system does not mask the information in the actual requests, but rather in various logs:\n* Credit card numbers appearing in entity names are masked in the requests of the Requests log.\n* Credit card numbers appearing in entity values are masked wherever requests can be viewed: the Requests log, violation details within that log, manual learning, and reports.\nThis setting is enabled by default, and exists in addition to masking parameters defined as containing sensitive information.",
               "type" : "boolean"
            },
            "pathParameterHandling" : {
               "description" : "A URI path parameter is the part of a path segment that occurs after its name. You can configure how a security policy handles path parameters that are attached to path segments in URIs.\nYou can enforce different levels of security based on your needs:\n* As Parameter: The system normalizes and enforces path parameters. For each path parameter, the system removes it from URLs as part of the normalization process, finds a corresponding parameter in the security policy (first at the matching URL level, and if not found, then at the Global level), and enforces it according to its attributes like any other parameters.\n  * As URL: The system does not normalize nor enforce path parameters. Path parameters are considered an integral part of the URL.\n  * Ignore: The system removes path parameters from URLs as part of the normalization process, but does not enforce them.",
               "enum" : [
                  "as-parameters",
                  "ignore",
                  "as-url"
               ],
               "type" : "string"
            },
            "triggerAsmIruleEvent" : {
               "description" : "When enabled, the system activates ASM iRule events. When disabled, the system does not activate ASM iRule events. Enable this option if you have written iRules\u2122 that process ASM iRule events, and assigned them to a specific virtual server. The default setting is disabled.\n  * Disabled: Leave this option disabled if you either have not written any ASM iRules.\n  * Normal mode: The system invokes the event ASM_REQUEST_DONE after the system completes processing each request, regardless of whether the request triggered violations. This gives you the opportunity, using iRules, to configure the system to perform actions after ASM handles requests whether they trigger, or do not trigger, violations.\n  * Compatibility mode: The system invokes the event ASM_REQUEST_VIOLATION after the system completes processing each request that triggered a violation. This gives you the opportunity, using iRules, to configure the system to perform actions after ASM handles requests only that trigger violations.",
               "enum" : [
                  "enabled-normal",
                  "enabled-compatibility",
                  "disabled"
               ],
               "type" : "string"
            },
            "trustXff" : {
               "description" : "When enabled, the system has confidence in an XFF (X-Forwarded-For) header in the request. When disabled, that the system does not have confidence in an XFF header in the request. The default setting is disabled.\n  * Select this option if the system is deployed behind an internal or other trusted proxy. Then, the system uses the IP address that initiated the connection to the proxy instead of the internal proxy\u2019s IP address.\n  * Leave this option disabled if you think the HTTP header may be spoofed, or crafted, by a malicious client. With this setting disabled, if the system is deployed behind an internal proxy, the system uses the internal proxy\u2019s IP address instead of the client\u2019s IP address.",
               "type" : "boolean"
            },
            "useDynamicSessionIdInUrl" : {
               "description" : "How the security policy processes URLs that use dynamic sessions. When disabled the security policy does not enforce dynamic sessions in URLs.\nWhen enabled the system will use a default or user-defined pattern for recognizing dynamic sessions in URLs.",
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "gwt-profiles" : {
         "items" : {
            "properties" : {
               "attackSignaturesCheck" : {
                  "type" : "boolean"
               },
               "defenseAttributes" : {
                  "properties" : {
                     "maximumTotalLengthOfGWTData" : {
                        "type" : "string"
                     },
                     "maximumValueLength" : {
                        "type" : "string"
                     },
                     "tolerateGWTParsingWarnings" : {
                        "type" : "boolean"
                     }
                  },
                  "type" : "object"
               },
               "description" : {
                  "type" : "string"
               },
               "isDefault" : {
                  "type" : "boolean"
               },
               "isReferenced" : {
                  "type" : "boolean"
               },
               "metacharElementCheck" : {
                  "type" : "boolean"
               },
               "metacharOverrides" : {
                  "items" : {
                     "properties" : {
                        "isAllowed" : {
                           "type" : "boolean"
                        },
                        "metachar" : {
                           "description" : "hexidecimal value",
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "metachar"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "name" : {
                  "type" : "string"
               },
               "signatureOverrides" : {
                  "items" : {
                     "properties" : {
                        "enabled" : {
                           "type" : "boolean"
                        },
                        "signatureId" : {
                           "type" : "integer"
                        }
                     },
                     "type" : "object"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "header-settings" : {
         "properties" : {
            "maximumHttpHeaderLength" : {
               "type" : "string"
            }
         },
         "type" : "object"
      },
      "headers" : {
         "items" : {
            "properties" : {
               "allowRepeatedOccurrences" : {
                  "type" : "boolean"
               },
               "base64Decoding" : {
                  "type" : "boolean"
               },
               "checkSignatures" : {
                  "type" : "boolean"
               },
               "htmlNormalization" : {
                  "type" : "boolean"
               },
               "mandatory" : {
                  "type" : "boolean"
               },
               "maskValueInLogs" : {
                  "type" : "boolean"
               },
               "name" : {
                  "type" : "string"
               },
               "normalizationViolations" : {
                  "type" : "boolean"
               },
               "percentDecoding" : {
                  "type" : "boolean"
               },
               "signatureOverrides" : {
                  "items" : {
                     "properties" : {
                        "enabled" : {
                           "type" : "boolean"
                        },
                        "signatureId" : {
                           "type" : "integer"
                        }
                     },
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "type" : {
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               },
               "urlNormalization" : {
                  "type" : "boolean"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "host-names" : {
         "items" : {
            "properties" : {
               "includeSubdomains" : {
                  "type" : "boolean"
               },
               "name" : {
                  "type" : "string"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "ip-intelligence" : {
         "properties" : {
            "enabled" : {
               "type" : "boolean"
            },
            "ipIntelligenceCategories" : {
               "items" : {
                  "properties" : {
                     "alarm" : {
                        "type" : "boolean"
                     },
                     "block" : {
                        "type" : "boolean"
                     },
                     "category" : {
                        "enum" : [
                           "Windows Exploits",
                           "Cloud-based Services",
                           "Scanners",
                           "Spam Sources",
                           "Web Attacks",
                           "Anonymous Proxy",
                           "Tor Proxies",
                           "Denial of Service",
                           "BotNets",
                           "Mobile Threats",
                           "Phishing Proxies",
                           "Infected Sources"
                        ],
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "category"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            }
         },
         "type" : "object"
      },
      "json-profiles" : {
         "items" : {
            "properties" : {
               "attackSignaturesCheck" : {
                  "type" : "boolean"
               },
               "defenseAttributes" : {
                  "properties" : {
                     "maximumArrayLength" : {
                        "type" : "string"
                     },
                     "maximumStructureDepth" : {
                        "type" : "string"
                     },
                     "maximumTotalLengthOfJSONData" : {
                        "type" : "string"
                     },
                     "maximumValueLength" : {
                        "type" : "string"
                     },
                     "tolerateJSONParsingWarnings" : {
                        "type" : "boolean"
                     }
                  },
                  "type" : "object"
               },
               "description" : {
                  "type" : "string"
               },
               "handleJsonValuesAsParameters" : {
                  "type" : "boolean"
               },
               "hasValidationFiles" : {
                  "type" : "boolean"
               },
               "isDefault" : {
                  "type" : "boolean"
               },
               "isReferenced" : {
                  "type" : "boolean"
               },
               "metacharElementCheck" : {
                  "type" : "boolean"
               },
               "metacharOverrides" : {
                  "items" : {
                     "properties" : {
                        "isAllowed" : {
                           "type" : "boolean"
                        },
                        "metachar" : {
                           "description" : "hexidecimal value",
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "metachar"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "name" : {
                  "type" : "string"
               },
               "sensitiveData" : {
                  "items" : {
                     "properties" : {
                        "parameterName" : {
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "parameterName"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "signatureOverrides" : {
                  "items" : {
                     "properties" : {
                        "enabled" : {
                           "type" : "boolean"
                        },
                        "signatureId" : {
                           "type" : "integer"
                        }
                     },
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "validationFiles" : {
                  "items" : {
                     "properties" : {
                        "importUrl" : {
                           "type" : "string"
                        },
                        "isPrimary" : {
                           "type" : "boolean"
                        },
                        "jsonValidationFile" : {
                           "$ref" : "#/properties/json-validation-files/items",
                           "type" : "object"
                        }
                     },
                     "required" : [
                        "jsonValidationFile",
                        "importUrl"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "json-validation-files" : {
         "items" : {
            "properties" : {
               "contents" : {
                  "type" : "string"
               },
               "fileName" : {
                  "type" : "string"
               },
               "isBase64" : {
                  "type" : "boolean"
               },
               "isReferenced" : {
                  "type" : "boolean"
               }
            },
            "required" : [
               "contents",
               "fileName"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "login-enforcement" : {
         "properties" : {
            "authenticatedUrls" : {
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            },
            "expirationTimePeriod" : {
               "type" : "string"
            },
            "logoutUrls" : {
               "items" : {
                  "properties" : {
                     "requestContains" : {
                        "type" : "string"
                     },
                     "requestOmits" : {
                        "type" : "string"
                     },
                     "url" : {
                        "$ref" : "#/properties/urls/items",
                        "type" : "object"
                     }
                  },
                  "required" : [
                     "url"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            }
         },
         "type" : "object"
      },
      "login-pages" : {
         "items" : {
            "properties" : {
               "accessValidation" : {
                  "properties" : {
                     "cookieContains" : {
                        "type" : "string"
                     },
                     "headerContains" : {
                        "type" : "string"
                     },
                     "headerOmits" : {
                        "type" : "string"
                     },
                     "parameterContains" : {
                        "type" : "string"
                     },
                     "responseContains" : {
                        "type" : "string"
                     },
                     "responseHttpStatus" : {
                        "type" : "string"
                     },
                     "responseHttpStatusOmits" : {
                        "items" : {
                           "type" : "string"
                        },
                        "type" : "array"
                     },
                     "responseOmits" : {
                        "type" : "string"
                     }
                  },
                  "type" : "object"
               },
               "authenticationType" : {
                  "enum" : [
                     "form",
                     "http-digest",
                     "http-basic",
                     "ajax-or-json-request",
                     "none",
                     "ntlm"
                  ],
                  "type" : "string"
               },
               "isReferenced" : {
                  "type" : "boolean"
               },
               "passwordParameterName" : {
                  "type" : "string"
               },
               "urlReference" : {
                  "$ref" : "#/properties/urls/items",
                  "type" : "object"
               },
               "usernameParameterName" : {
                  "type" : "string"
               }
            },
            "type" : "object"
         },
         "type" : "array"
      },
      "methods" : {
         "items" : {
            "properties" : {
               "actAsMethod" : {
                  "enum" : [
                     "POST",
                     "GET"
                  ],
                  "type" : "string"
               },
               "name" : {
                  "type" : "string"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "microservices" : {
         "items" : {
            "properties" : {
               "description" : {
                  "type" : "string"
               },
               "enforcementMode" : {
                  "enum" : [
                     "policy-default",
                     "blocking",
                     "transparent"
                  ],
                  "type" : "string"
               },
               "hostName" : {
                  "type" : "string"
               },
               "hostNameType" : {
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               },
               "urlName" : {
                  "type" : "string"
               },
               "urlType" : {
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               },
               "wildcardUrlIncludesSlash" : {
                  "type" : "boolean"
               }
            },
            "required" : [
               "urlName",
               "hostName"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "name" : {
         "type" : "string"
      },
      "navigation-parameters" : {
         "items" : {
            "properties" : {
               "name" : {
                  "type" : "string"
               },
               "urlName" : {
                  "type" : "string"
               }
            },
            "required" : [
               "urlName",
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "parameters" : {
         "items" : {
            "description" : "This section defines parameters that the security policy permits in requests.",
            "properties" : {
               "allowEmptyValue" : {
                  "description" : "Determines whether an empty value is allowed for a parameter.",
                  "type" : "boolean"
               },
               "allowRepeatedParameterName" : {
                  "description" : "Determines whether multiple parameter instances with the same name are allowed in one request.",
                  "type" : "boolean"
               },
               "arraySerializationFormat" : {
                  "description" : "Specifies type of serialization for array of primitives parameter.\nSerialization defines how multiple values are delimited - format that can be transmitted and reconstructed later:\n - **pipe**: pipeline-separated values. Array color=[\"blue\",\"black\"] -> color=blue|black.\n - **form**: ampersand-separated values. Array color=[\"blue\",\"black\"] -> color=blue,black.\n - **matrix**: semicolon-prefixed values. Array color=[\"blue\",\"black\"] -> ;color=blue,black.\n - **tsv**: tab-separated values. Aarray color=[\"blue\",\"black\"] -> color=blue\\tblack.\n - **csv**: comma-separated values. Array color=[\"blue\",\"black\"] -> color=blue,black.\n - **label**: dot-prefixed values. Array color=[\"blue\",\"black\"] -> .blue.black.\n - **multi**: multiple parameter instances rather than multiple values. Array color=[\"blue\",\"black\"] -> color=blue&color=black.\n - **ssv**: space-separated values. Array color=[\"blue\",\"black\"] -> color=blue black.\n - **multipart**: defines array of files.\n\n**Notes**:\n - This attribute is relevant only for parameters with **array** *valueType*.\n - **multi** and **form** serializations can be defined for parameter with *query*, *form-data* or *cookie* locations only.\n - **multipart** serialization can be defined for parameter with *form-data* location only.\n - **matrix** and **label** serializations can be defined for parameter with *path* location only.",
                  "enum" : [
                     "form",
                     "csv",
                     "multipart",
                     "matrix",
                     "tsv",
                     "pipe",
                     "label",
                     "multi",
                     "ssv"
                  ],
                  "type" : "string"
               },
               "arrayUniqueItemsCheck" : {
                  "description" : "Determines whether items in an array parameter must be unique.\nThis attribute is relevant only for parameters with **array** *valueType*.",
                  "type" : "boolean"
               },
               "attackSignaturesCheck" : {
                  "description" : "Determines whether attack signatures and threat campaigns must be detected in a parameter's value.\nThis attribute is relevant only for parameters with **alpha-numeric** or **binary** *dataType*.",
                  "type" : "boolean"
               },
               "checkMaxItemsInArray" : {
                  "description" : "Determines whether an array parameter has a restricted maximum number of items.\nThis attribute is relevant only for parameters with **array** *valueType*.",
                  "type" : "boolean"
               },
               "checkMaxValue" : {
                  "description" : "Determines whether the parameter has a restricted maximum value.\nThis attribute is relevant only for parameters with **integer** or **decimal** *dataType*.",
                  "type" : "boolean"
               },
               "checkMaxValueLength" : {
                  "description" : "Determines whether a parameter has a restricted maximum lenght for value.",
                  "type" : "boolean"
               },
               "checkMetachars" : {
                  "description" : "Determines whether disallowed metacharacters must be detected in a parameter's name.\nThis attribute is relevant only for **wildcard** parameters with **alpha-numeric** *dataType*,",
                  "type" : "boolean"
               },
               "checkMinItemsInArray" : {
                  "description" : "Determines whether an array parameter has a restricted minimum number of items.\nThis attribute is relevant only for parameters with **array** *valueType*.",
                  "type" : "boolean"
               },
               "checkMinValue" : {
                  "description" : "Determines whether a parameter has a restricted minimum value.\nThis attribute is relevant only for parameters with **integer** or **decimal** *dataType*.",
                  "type" : "boolean"
               },
               "checkMinValueLength" : {
                  "description" : "Determines whether a parameter has a restricted minimum lenght for value.",
                  "type" : "boolean"
               },
               "checkMultipleOfValue" : {
                  "description" : "Determines whether a parameter's value is a multiple of a number defined in *multipleOf*.\nThis attribute is relevant only for parameters with **integer** or **decimal** *dataType*.",
                  "type" : "boolean"
               },
               "contentProfile" : {
                  "properties" : {
                     "contentProfile" : {
                        "properties" : {
                           "name" : {
                              "type" : "string"
                           }
                        },
                        "required" : [
                           "name"
                        ],
                        "type" : "object"
                     }
                  },
                  "type" : "object"
               },
               "dataType" : {
                  "description" : "Specifies data type of parameter's value:\n - **none**: system data type which is used by policy builder and cannot be set manually.\n - **alpha-numeric**: specifies that the value of parameter can be any text consisting of letters, digits, and the underscore character.\n - **binary**: specifies there is no text limit for the value of a parameter (length checks only).\n - **phone**: specifies that the value of a parameter can be text in telephone number format only.\n - **email**: specifies that the value of a parameter must be text in email format only.\n - **boolean**: specifies that the value of a parameter must be boolean (only *true* and  *false* values are allowed).\n - **integer**: specifies that the value of a parameter must be whole numbers only (no decimals).\n - **decimal**: specifies that the value of a parameter is numbers only and can include decimals.\n\n**Notes**:\n-  This attribute is relevant for parameters with **array** or **user-input** *valueType* only.",
                  "enum" : [
                     "email",
                     "alpha-numeric",
                     "boolean",
                     "binary",
                     "phone",
                     "none",
                     "decimal",
                     "integer"
                  ],
                  "type" : "string"
               },
               "disallowFileUploadOfExecutables" : {
                  "description" : "Determines whether a parameter's value cannot have binary executable content.\nThis attribute is relevant only for parameters with **binary** *dataType*.",
                  "type" : "boolean"
               },
               "enableRegularExpression" : {
                  "description" : "Determines whether the parameter value includes the pattern defined in *regularExpression*.\nThis attribute is relevant only for parameters with **alpha-numeric** *dataType*.",
                  "type" : "boolean"
               },
               "exclusiveMax" : {
                  "description" : "Determines whether the maximum value defined in *maximumValue* attribute is exclusive.\nThis attribute is relevant only if *checkMaxValue* is set to **true**.",
                  "type" : "boolean"
               },
               "exclusiveMin" : {
                  "description" : "Determines whether a minimum value defined in *minimumValue* attribute is exclusive.\nThis attribute is relevant only if *checkMinValue* is set to **true**.",
                  "type" : "boolean"
               },
               "explodeObjectSerialization" : {
                  "description" : "Specifies whether an array or object parameters should have separate values for each array item or object property.\nThis attribute is relevant only if *objectSerializationStyle* is defined.\n\n**Notes**:\n-  This attribute is not relevant for parameters with **deep-object**, **space-delimited** or **pipe-delimited** *objectSerializationStyle*.",
                  "type" : "boolean"
               },
               "inClassification" : {
                  "type" : "boolean"
               },
               "isBase64" : {
                  "description" : "Determines whether a parameter's value contains a Base64 encoded string.\nIf the value is indeed Base64 encoded, the system decodes this value and continues with its security checks.\nThis attribute is relevant only for parameters with **alpha-numeric** or **binary** *dataType*.",
                  "type" : "boolean"
               },
               "isCookie" : {
                  "description" : "Determines whether a parameter is located in the value of Cookie header.\n*parameterLocation* attribute is ignored if **isCookie** is set to *true*.",
                  "type" : "boolean"
               },
               "isHeader" : {
                  "description" : "Determines whether a parameter is located in headers as one of the headers.\n*parameterLocation* attribute is ignored if **isHeader** is set to *true*.",
                  "type" : "boolean"
               },
               "isReferenced" : {
                  "type" : "boolean"
               },
               "level" : {
                  "description" : "Specifies whether the parameter is associated with a URL, a flow, or neither.",
                  "enum" : [
                     "flow",
                     "global",
                     "url"
                  ],
                  "type" : "string"
               },
               "mandatory" : {
                  "description" : "Determines whether a parameter must exist in the request.",
                  "type" : "boolean"
               },
               "maxItemsInArray" : {
                  "description" : "Determines the restriction forthe  maximum number of items in an array parameter.\nThis attribute is relevant only if *checkMaxItemsInArray* is set to **true**.",
                  "type" : "integer"
               },
               "maximumLength" : {
                  "description" : "Determines the restriction for the maximum lenght of parameter's value.\nThis attribute is relevant only if *checkMaxValueLength* is set to **true**.",
                  "type" : "integer"
               },
               "maximumValue" : {
                  "description" : "Determines the restriction for the maximum value of parameter.\nThis attribute is relevant only if *checkMaxValue* is set to **true**.",
                  "type" : "number"
               },
               "metacharsOnParameterValueCheck" : {
                  "description" : "Determines whether disallowed metacharacters must be detected in a parameter's value.\nThis attribute is relevant only for parameters with **alpha-numeric** *dataType*.",
                  "type" : "boolean"
               },
               "minItemsInArray" : {
                  "description" : "Determines the restriction for the minimum number of items in an array parameter.\nThis attribute is relevant only if *checkMinItemsInArray* is set to **true**.",
                  "type" : "integer"
               },
               "minimumLength" : {
                  "description" : "Determines the restriction for the minimum lenght if parameter's is value.\nThis attribute is relevant only if *checkMinValueLength* is set to **true**.",
                  "type" : "integer"
               },
               "minimumValue" : {
                  "description" : "Determines the restriction for the minimum value of a parameter.\nThis attribute is relevant only if *checkMinValue* is set to **true**.",
                  "type" : "number"
               },
               "multipleOf" : {
                  "description" : "Determines the number by which a parameter's value is divisible without remainder.\nThis number must be positive and it may be a floating-point number.\nThis attribute is relevant only if *checkMultipleOfValue* is set to **true**.",
                  "type" : "number"
               },
               "name" : {
                  "description" : "Specifies the name of a parameter which must be permitted in requests.\nFormat of parameter name attribute differs depending on *type* attribute:\n - **explicit** *type*: name of permitted parameter in request should literally match.\n - **wildcard** *type*: name of permitted parameter in request should match wildcard expression.\n\nThe syntax for wildcard entities is based on shell-style wildcard characters.\nThis table lists the wildcard characters that you can use so that the entity name can match multiple objects:\n\n| Wildcard Character | Matches                              |\n|--------------------+--------------------------------------|\n| *                  | All characters                       |\n| ?                  | Any single character                 |\n| [abcde]            | Exactly one of the characters listed |\n| [!abcde]           | Any character not listed             |\n| [a-e]              | Exactly one character in the range   |\n| [!a-e]             | Any character not in the range       |\n\n**Notes**:\n - Wildcards do not match regular expressions. Do not use a regular expression as a wildcard.\n - Empty parameter name is allowed for **explicit** *type*",
                  "type" : "string"
               },
               "nameMetacharOverrides" : {
                  "description" : "Determines metacharacters whose security policy settings are overridden for this parameter, and which action the security policy takes when it discovers a request for this parameter that has these metacharacters in the name.\nThis attribute is relevant only if *checkMetachars* is set to **true**.",
                  "items" : {
                     "properties" : {
                        "isAllowed" : {
                           "description" : "Specifies permission of *metachar* - when *false*, then character is prohibited.",
                           "type" : "boolean"
                        },
                        "metachar" : {
                           "description" : "Specifies character in hexadecimal format with special allowance.",
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "metachar"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "objectSerializationStyle" : {
                  "description" : "Specifies the type of serialization for an object or complex array parameter.\nSerialization defines how multiple values are delimited - format that can be transmitted and reconstructed later:\n - **pipe-delimited**: pipeline-separated values. Object color={\"R\":100,\"G\":200} -> color=R|100|G|200.\n - **form**: ampersand-separated values. Object color={\"R\":100,\"G\":200} -> color=R,100,G,200 if *explodeObjectSerialization* set to **false** or -> R=100&G=200 if *explodeObjectSerialization* set to **true*.\n - **space-delimited**: space-separated values. Object color={\"R\":100,\"G\":200} -> color=R 100 G 200.\n - **deep-object**: rendering nested objects. Object color={\"R\":100,\"G\":200} -> color[R]=100&color[G]=200.\n - **matrix**: semicolon-prefixed values. Object color={\"R\":100,\"G\":200} -> ;color=R,100,G,200 if *explodeObjectSerialization* set to **false** or -> ;R=100;G=200 if *explodeObjectSerialization* set to **true*.\n - **simple**: comma-separated values. Object color={\"R\":100,\"G\":200} -> R,100,G,200 if *explodeObjectSerialization* set to **false** or -> R=100,G=200 if *explodeObjectSerialization* set to **true*.\n - **label**: dot-prefixed values. Object color={\"R\":100,\"G\":200} -> .R.100.G.200 if *explodeObjectSerialization* set to **false** or -> .R=100.G=200 if *explodeObjectSerialization* set to **true*.\n\n**Notes**:\n - This attribute is relevant only for parameters with **object** or **openapi-array** *valueType*.\n - **form** serialization can be defined for a parameter with *query*, *form-data* or *cookie* locations only.\n - **matrix** and **label** serializations can be defined for an array parameter with *path* location only.\n - **simple** serializations can be defined for a parameter with *path* and *header* locations only.\n - **deep-object** serialization can be defined for a parameter with *query* or *form-data* locations only.",
                  "enum" : [
                     "form",
                     "matrix",
                     "pipe-delimited",
                     "simple",
                     "deep-object",
                     "label",
                     "space-delimited"
                  ],
                  "type" : "string"
               },
               "parameterEnumValues" : {
                  "description" : "Determines the set of possible parameter's values.\nThis attribute is not relevant for parameters with **phone**, **email** or **binary** *dataType*.",
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "parameterLocation" : {
                  "description" : "Specifies location of parameter in request:\n - **any**: in query string, in POST data (body) or in URL path.\n - **query**: in query string.\n - **form-data**: in POST data (body).\n - **cookie**: in value of Cookie header.\n - **path**: in URL path.\n - **header**: in request headers.\n\n**Notes**:\n - **path** location can be defined for parameter with **global** *level* only.\n - **path**, **header** and **cookie** location can be defined for parameter with **explicit** *type* only.\n - **header** and **cookie** location cannot be defined for parameter with empty *name*.",
                  "enum" : [
                     "cookie",
                     "query",
                     "form-data",
                     "any",
                     "path",
                     "header"
                  ],
                  "type" : "string"
               },
               "regularExpression" : {
                  "description" : "Determines a positive regular expression for a parameter's value.\nThis attribute is relevant only if *enableRegularExpression* is set to **true**.\n\n**Notes**:\n - The length of a regular expression is limited to 254 characters.",
                  "type" : "string"
               },
               "sensitiveParameter" : {
                  "description" : "Determines whether a parameter is sensitive and must be not visible in logs nor in the user interface.\nInstead of actual valu,e a string of asterisks is shown for this parameter.\nUse it to protect sensitive user input, such as a password or a credit card number, in a validated request.",
                  "type" : "boolean"
               },
               "signatureOverrides" : {
                  "description" : "Determines attack signatures whose security policy settings are overridden for this parameter, and which action the security policy takes when it discovers a request for this parameter that matches these attack signatures.\nThis attribute is relevant only if *signatureOverrides* is set to **true**.",
                  "items" : {
                     "properties" : {
                        "enabled" : {
                           "description" : "Specifies, when true, that the overridden signature is enforced",
                           "type" : "boolean"
                        },
                        "signatureId" : {
                           "description" : "signature id",
                           "type" : "integer"
                        }
                     },
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "staticValues" : {
                  "description" : "Determines the set of possible parameter's values.\nThis attribute is relevant for parameters with **static-content** *valueType* only.",
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "type" : {
                  "description" : "Specifies the type of the *name* attribute.",
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               },
               "url" : {
                  "$ref" : "#/properties/urls/items",
                  "type" : "object"
               },
               "valueMetacharOverrides" : {
                  "description" : "Determines metacharacters whose security policy settings are overridden for this parameter, and which action the security policy takes when it discovers a request for this parameter that has these metacharacters in value.\nThis attribute is relevant only if *metacharsOnParameterValueCheck* is set to **true**.",
                  "items" : {
                     "properties" : {
                        "isAllowed" : {
                           "description" : "Specifies permission of *metachar* - when *false*, then character is prohibited.",
                           "type" : "boolean"
                        },
                        "metachar" : {
                           "description" : "Specifies character in hexadecimal format with special allowance.",
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "metachar"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "valueType" : {
                  "description" : "Specifies type of parameter's value:\n - **object**: the parameter\u2019s value is complex object defined by JSON schema.\n - **dynamic-content**: the parameter\u2019s content changes dynamically.\n - **openapi-array**: the parameter\u2019s value is complex array defined by JSON schema.\n - **ignore**: the system does not perform validity checks on the value of the parameter.\n - **static-content**: the parameter has a static, or pre-defined, value(s).\n - **json**: the parameter\u2019s value is JSON data.\n - **array**: the parameter\u2019s value is array of primitives.\n - **user-input**: the parameter\u2019s value is provided by user-input.\n - **xml**: the parameter\u2019s value is XML data.\n - **auto-detect**: the parameter\u2019s value can be user-inpur, XML data or JSON data. The system automatically classifies the type of value.\n - **dynamic-parameter-name**: the parameter\u2019s name changes dynamically.\n\n**Notes**:\n - **dynamic-parameter-name** value type can be defined for a parameter with **flow** *level* and **explicit** *type* only.\n - **dynamic-content** value type can be defined for a parameter with **explicit** *type* only.",
                  "enum" : [
                     "auto-detect",
                     "dynamic-content",
                     "user-input",
                     "object",
                     "static-content",
                     "ignore",
                     "json",
                     "array",
                     "openapi-array",
                     "xml",
                     "dynamic-parameter-name"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "parentPolicyName" : {
         "type" : "string"
      },
      "plain-text-profiles" : {
         "items" : {
            "properties" : {
               "attackSignaturesCheck" : {
                  "type" : "boolean"
               },
               "defenseAttributes" : {
                  "properties" : {
                     "maximumLineLength" : {
                        "type" : "string"
                     },
                     "maximumTotalLength" : {
                        "type" : "string"
                     },
                     "performPercentDecoding" : {
                        "type" : "boolean"
                     }
                  },
                  "type" : "object"
               },
               "description" : {
                  "type" : "string"
               },
               "isDefault" : {
                  "type" : "boolean"
               },
               "isReferenced" : {
                  "type" : "boolean"
               },
               "metacharElementCheck" : {
                  "type" : "boolean"
               },
               "metacharOverrides" : {
                  "items" : {
                     "properties" : {
                        "isAllowed" : {
                           "type" : "boolean"
                        },
                        "metachar" : {
                           "description" : "hexidecimal value",
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "metachar"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "name" : {
                  "type" : "string"
               },
               "signatureOverrides" : {
                  "items" : {
                     "properties" : {
                        "enabled" : {
                           "type" : "boolean"
                        },
                        "signatureId" : {
                           "type" : "integer"
                        }
                     },
                     "type" : "object"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "policy-builder" : {
         "properties" : {
            "autoApply" : {
               "properties" : {
                  "applyAtAllTimes" : {
                     "type" : "boolean"
                  },
                  "applyOnAllDays" : {
                     "type" : "boolean"
                  },
                  "applyOnFridays" : {
                     "type" : "boolean"
                  },
                  "applyOnMondays" : {
                     "type" : "boolean"
                  },
                  "applyOnSaturdays" : {
                     "type" : "boolean"
                  },
                  "applyOnSundays" : {
                     "type" : "boolean"
                  },
                  "applyOnThursdays" : {
                     "type" : "boolean"
                  },
                  "applyOnTuesdays" : {
                     "type" : "boolean"
                  },
                  "applyOnWednesdays" : {
                     "type" : "boolean"
                  },
                  "endTime" : {
                     "type" : "string"
                  },
                  "frequency" : {
                     "enum" : [
                        "scheduled",
                        "never",
                        "real-time"
                     ],
                     "type" : "string"
                  },
                  "startTime" : {
                     "type" : "string"
                  }
               },
               "type" : "object"
            },
            "enableFullPolicyInspection" : {
               "type" : "boolean"
            },
            "enableTrustedTrafficSiteChangeTracking" : {
               "type" : "boolean"
            },
            "enableUntrustedTrafficSiteChangeTracking" : {
               "type" : "boolean"
            },
            "fullyAutomatic" : {
               "type" : "boolean"
            },
            "inactiveEntityInactivityDurationInDays" : {
               "type" : "number"
            },
            "learnFromResponses" : {
               "type" : "boolean"
            },
            "learnInactiveEntities" : {
               "type" : "boolean"
            },
            "learnOnlyFromNonBotTraffic" : {
               "type" : "boolean"
            },
            "learningMode" : {
               "enum" : [
                  "automatic",
                  "manual",
                  "disabled"
               ],
               "type" : "string"
            },
            "responseStatusCodes" : {
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            },
            "trafficTighten" : {
               "properties" : {
                  "maxModificationSuggestionScore" : {
                     "type" : "integer"
                  },
                  "minDaysBetweenSamples" : {
                     "type" : "number"
                  },
                  "totalRequests" : {
                     "type" : "integer"
                  }
               },
               "type" : "object"
            },
            "trustAllIps" : {
               "type" : "boolean"
            },
            "trustedTrafficLoosen" : {
               "properties" : {
                  "differentSources" : {
                     "type" : "integer"
                  },
                  "maxDaysBetweenSamples" : {
                     "type" : "number"
                  },
                  "minHoursBetweenSamples" : {
                     "type" : "number"
                  }
               },
               "type" : "object"
            },
            "trustedTrafficSiteChangeTracking" : {
               "properties" : {
                  "differentSources" : {
                     "type" : "integer"
                  },
                  "maxDaysBetweenSamples" : {
                     "type" : "number"
                  },
                  "minMinutesBetweenSamples" : {
                     "type" : "number"
                  }
               },
               "type" : "object"
            },
            "untrustedTrafficLoosen" : {
               "properties" : {
                  "differentSources" : {
                     "type" : "integer"
                  },
                  "maxDaysBetweenSamples" : {
                     "type" : "number"
                  },
                  "minHoursBetweenSamples" : {
                     "type" : "number"
                  }
               },
               "type" : "object"
            },
            "untrustedTrafficSiteChangeTracking" : {
               "properties" : {
                  "differentSources" : {
                     "type" : "integer"
                  },
                  "maxDaysBetweenSamples" : {
                     "type" : "number"
                  },
                  "minMinutesBetweenSamples" : {
                     "type" : "number"
                  }
               },
               "type" : "object"
            }
         },
         "type" : "object"
      },
      "policy-builder-central-configuration" : {
         "properties" : {
            "buildingMode" : {
               "enum" : [
                  "central",
                  "local"
               ],
               "type" : "string"
            },
            "centralPbAddresses" : {
               "items" : {
                  "properties" : {
                     "hostName" : {
                        "type" : "string"
                     },
                     "ipAddress" : {
                        "type" : "string"
                     },
                     "order" : {
                        "type" : "integer"
                     },
                     "port" : {
                        "type" : "integer"
                     },
                     "verifyCertificate" : {
                        "type" : "boolean"
                     }
                  },
                  "required" : [
                     "ipAddress",
                     "port"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            },
            "eventCorrelationMode" : {
               "enum" : [
                  "central",
                  "local"
               ],
               "type" : "string"
            }
         },
         "type" : "object"
      },
      "policy-builder-cookie" : {
         "properties" : {
            "collapseCookieOccurrences" : {
               "type" : "integer"
            },
            "collapseCookiesIntoOneEntity" : {
               "type" : "boolean"
            },
            "enforceUnmodifiedCookies" : {
               "type" : "boolean"
            },
            "learnExplicitCookies" : {
               "enum" : [
                  "selective",
                  "never"
               ],
               "type" : "string"
            },
            "maximumCookies" : {
               "type" : "integer"
            }
         },
         "type" : "object"
      },
      "policy-builder-filetype" : {
         "properties" : {
            "learnExplicitFiletypes" : {
               "enum" : [
                  "always",
                  "selective",
                  "compact",
                  "never"
               ],
               "type" : "string"
            },
            "maximumFileTypes" : {
               "type" : "integer"
            }
         },
         "type" : "object"
      },
      "policy-builder-header" : {
         "properties" : {
            "maximumHosts" : {
               "type" : "integer"
            },
            "validHostNames" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "policy-builder-parameter" : {
         "properties" : {
            "classifyParameters" : {
               "type" : "boolean"
            },
            "collapseParameterOccurrences" : {
               "type" : "integer"
            },
            "collapseParametersIntoOneEntity" : {
               "type" : "boolean"
            },
            "dynamicParameters" : {
               "properties" : {
                  "allHiddenFields" : {
                     "type" : "boolean"
                  },
                  "formParameters" : {
                     "type" : "boolean"
                  },
                  "linkParameters" : {
                     "type" : "boolean"
                  },
                  "uniqueValueSets" : {
                     "type" : "integer"
                  }
               },
               "type" : "object"
            },
            "learnExplicitParameters" : {
               "enum" : [
                  "always",
                  "selective",
                  "compact",
                  "never"
               ],
               "type" : "string"
            },
            "maximumParameters" : {
               "type" : "integer"
            },
            "parameterLearningLevel" : {
               "enum" : [
                  "global",
                  "url"
               ],
               "type" : "string"
            },
            "parametersIntegerValue" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "policy-builder-redirection-protection" : {
         "properties" : {
            "learnExplicitRedirectionDomains" : {
               "enum" : [
                  "always",
                  "never"
               ],
               "type" : "string"
            },
            "maximumRedirectionDomains" : {
               "type" : "integer"
            }
         },
         "type" : "object"
      },
      "policy-builder-server-technologies" : {
         "properties" : {
            "enableServerTechnologiesDetection" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "policy-builder-sessions-and-logins" : {
         "properties" : {
            "learnLoginPage" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "policy-builder-url" : {
         "properties" : {
            "classifyUrls" : {
               "type" : "boolean"
            },
            "classifyWebsocketUrls" : {
               "type" : "boolean"
            },
            "collapseUrlDepth" : {
               "type" : "integer"
            },
            "collapseUrlOccurrences" : {
               "type" : "integer"
            },
            "collapseUrlsIntoOneEntity" : {
               "type" : "boolean"
            },
            "learnExplicitUrls" : {
               "enum" : [
                  "always",
                  "selective",
                  "compact",
                  "never"
               ],
               "type" : "string"
            },
            "learnExplicitWebsocketUrls" : {
               "enum" : [
                  "always",
                  "selective",
                  "never"
               ],
               "type" : "string"
            },
            "learnMethodsOnUrls" : {
               "type" : "boolean"
            },
            "maximumUrls" : {
               "type" : "integer"
            },
            "maximumWebsocketUrls" : {
               "type" : "integer"
            },
            "wildcardUrlFiletypes" : {
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            }
         },
         "type" : "object"
      },
      "protocolIndependent" : {
         "type" : "boolean"
      },
      "redirection-protection" : {
         "properties" : {
            "redirectionDomains" : {
               "items" : {
                  "properties" : {
                     "domainName" : {
                        "type" : "string"
                     },
                     "includeSubdomains" : {
                        "type" : "boolean"
                     },
                     "type" : {
                        "enum" : [
                           "explicit",
                           "wildcard"
                        ],
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "domainName"
                  ],
                  "type" : "object"
               },
               "type" : "array"
            },
            "redirectionProtectionEnabled" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "redirection-protection-domains" : {
         "items" : {
            "properties" : {
               "domainName" : {
                  "type" : "string"
               },
               "includeSubdomains" : {
                  "type" : "boolean"
               },
               "type" : {
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "domainName"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "sensitive-parameters" : {
         "items" : {
            "description" : "This section defines sensitive parameters.\nThe contents of these parameters are not visible in logs nor in the user interfaces.\nInstead of actual values a string of asterisks is shown for these parameters.\nUse these parameters to protect sensitive user input, such as a password or a credit card number, in a validated request.\nSensitive parameter \"password\" always defined by default.",
            "properties" : {
               "name" : {
                  "description" : "Name of a parameter whose values the system should consider sensitive.",
                  "type" : "string"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "server-technologies" : {
         "items" : {
            "properties" : {
               "serverTechnologyName" : {
                  "type" : "string"
               }
            },
            "type" : "object"
         },
         "type" : "array"
      },
      "session-tracking" : {
         "properties" : {
            "blockAll" : {
               "properties" : {
                  "checkDeviceIdThreshold" : {
                     "type" : "boolean"
                  },
                  "checkIpThreshold" : {
                     "type" : "boolean"
                  },
                  "checkPeriod" : {
                     "type" : "boolean"
                  },
                  "checkSessionThreshold" : {
                     "type" : "boolean"
                  },
                  "checkUsernameThreshold" : {
                     "type" : "boolean"
                  },
                  "deviceIdThreshold" : {
                     "type" : "integer"
                  },
                  "ipThreshold" : {
                     "type" : "integer"
                  },
                  "period" : {
                     "type" : "integer"
                  },
                  "sessionThreshold" : {
                     "type" : "integer"
                  },
                  "urlBlockingMode" : {
                     "enum" : [
                        "block-all-urls",
                        "block-authenticated-urls"
                     ],
                     "type" : "string"
                  },
                  "usernameThreshold" : {
                     "type" : "integer"
                  }
               },
               "type" : "object"
            },
            "delayBlocking" : {
               "properties" : {
                  "checkDeviceIdThreshold" : {
                     "type" : "boolean"
                  },
                  "checkIpThreshold" : {
                     "type" : "boolean"
                  },
                  "checkSessionThreshold" : {
                     "type" : "boolean"
                  },
                  "checkUsernameThreshold" : {
                     "type" : "boolean"
                  },
                  "deviceIdThreshold" : {
                     "type" : "integer"
                  },
                  "ipThreshold" : {
                     "type" : "integer"
                  },
                  "period" : {
                     "type" : "integer"
                  },
                  "sessionThreshold" : {
                     "type" : "integer"
                  },
                  "usernameThreshold" : {
                     "type" : "integer"
                  },
                  "violations" : {
                     "items" : {
                        "properties" : {
                           "name" : {
                              "type" : "string"
                           }
                        },
                        "type" : "object"
                     },
                     "type" : "array"
                  }
               },
               "type" : "object"
            },
            "logAllRequests" : {
               "properties" : {
                  "checkDeviceIdThreshold" : {
                     "type" : "boolean"
                  },
                  "checkIpThreshold" : {
                     "type" : "boolean"
                  },
                  "checkSessionThreshold" : {
                     "type" : "boolean"
                  },
                  "checkUsernameThreshold" : {
                     "type" : "boolean"
                  },
                  "deviceIdThreshold" : {
                     "type" : "integer"
                  },
                  "ipThreshold" : {
                     "type" : "integer"
                  },
                  "period" : {
                     "type" : "integer"
                  },
                  "sessionThreshold" : {
                     "type" : "integer"
                  },
                  "usernameThreshold" : {
                     "type" : "integer"
                  }
               },
               "type" : "object"
            },
            "sessionTrackingConfiguration" : {
               "properties" : {
                  "detectUsernameFromLoginPages" : {
                     "items" : {
                        "properties" : {
                           "loginPage" : {
                              "$ref" : "#/properties/login-pages/items",
                              "type" : "object"
                           }
                        },
                        "required" : [
                           "loginPage"
                        ],
                        "type" : "object"
                     },
                     "type" : "array"
                  },
                  "enableSessionAwareness" : {
                     "type" : "boolean"
                  },
                  "enableTrackingSessionHijackingByDeviceId" : {
                     "type" : "boolean"
                  },
                  "userNameSource" : {
                     "enum" : [
                        "all-login-pages",
                        "none",
                        "apm",
                        "login-pages"
                     ],
                     "type" : "string"
                  }
               },
               "type" : "object"
            },
            "violationDetectionActions" : {
               "properties" : {
                  "trackViolationsAndPerformActions" : {
                     "type" : "boolean"
                  },
                  "violationDetectionPeriod" : {
                     "type" : "integer"
                  }
               },
               "type" : "object"
            }
         },
         "type" : "object"
      },
      "session-tracking-statuses" : {
         "items" : {
            "properties" : {
               "action" : {
                  "enum" : [
                     "delay-blocking",
                     "block-all",
                     "log-all"
                  ],
                  "type" : "string"
               },
               "createdDatetime" : {
                  "format" : "date-time",
                  "type" : "string"
               },
               "expirationDatetime" : {
                  "enum" : [
                     "N/A"
                  ],
                  "format" : "date-time",
                  "type" : "string"
               },
               "scope" : {
                  "enum" : [
                     "user",
                     "session",
                     "ip",
                     "device"
                  ],
                  "type" : "string"
               },
               "value" : {
                  "type" : "string"
               }
            },
            "required" : [
               "scope",
               "action",
               "value"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "signature-sets" : {
         "items" : {
            "properties" : {
               "alarm" : {
                  "type" : "boolean"
               },
               "block" : {
                  "type" : "boolean"
               },
               "learn" : {
                  "type" : "boolean"
               },
               "name" : {
                  "type" : "string"
               }
            },
            "type" : "object"
         },
         "type" : "array"
      },
      "signature-settings" : {
         "properties" : {
            "attackSignatureFalsePositiveMode" : {
               "enum" : [
                  "detect-and-allow",
                  "detect",
                  "disabled"
               ],
               "type" : "string"
            },
            "minimumAccuracyForAutoAddedSignatures" : {
               "enum" : [
                  "low",
                  "medium",
                  "high"
               ],
               "type" : "string"
            },
            "placeSignaturesInStaging" : {
               "type" : "boolean"
            },
            "signatureStaging" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "signatures" : {
         "items" : {
            "description" : "This section defines the properties of signature on the policy.",
            "properties" : {
               "alarm" : {
                  "type" : "boolean"
               },
               "block" : {
                  "type" : "boolean"
               },
               "enabled" : {
                  "description" : "Specifies, if true, that the signature is enabled on the security policy. When false, the signature is disable on the security policy.",
                  "type" : "boolean"
               },
               "inPolicy" : {
                  "enum" : [
                     "true",
                     "false"
                  ],
                  "type" : "string"
               },
               "isPriorRuleEnforced" : {
                  "type" : "boolean"
               },
               "learn" : {
                  "type" : "boolean"
               },
               "signatureId" : {
                  "description" : "The signature id by which to access the signature.",
                  "type" : "integer"
               }
            },
            "type" : "object"
         },
         "type" : "array"
      },
      "template" : {
         "properties" : {
            "name" : {
               "type" : "string"
            }
         },
         "required" : [
            "name"
         ],
         "type" : "object"
      },
      "threat-campaign-settings" : {
         "properties" : {
            "threatCampaignEnforcementReadinessPeriod" : {
               "type" : "integer"
            },
            "threatCampaignStaging" : {
               "type" : "boolean"
            }
         },
         "type" : "object"
      },
      "threat-campaigns" : {
         "items" : {
            "properties" : {
               "isEnabled" : {
                  "type" : "boolean"
               },
               "name" : {
                  "type" : "string"
               }
            },
            "type" : "object"
         },
         "type" : "array"
      },
      "type" : {
         "enum" : [
            "parent",
            "security"
         ],
         "type" : "string"
      },
      "urls" : {
         "items" : {
            "description" : "In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web application being protected. If you are using automatic policy building (and the policy includes learning URLs), the system can determine which URLs to add, based on legitimate traffic. When you create a security policy, wildcard URLs of * (representing all HTTP URLs) are added to the Allowed HTTP URLs lists. During the enforcement readiness period, the system examines the URLs in the traffic and makes learning suggestions that you can review and add the URLs to the policy as needed. This way, the security policy includes the HTTP URLs that are typically used. When you think all the URLs are included in the security policy, you can remove the * wildcards from the allowed URLs lists.",
            "properties" : {
               "allowRenderingInFrames" : {
                  "description" : "Specifies the conditions for when the browser should allow this URL to be rendered in a frame or iframe.\nNever: Specifies that this URL must never be rendered in a frame or iframe. The web application instructs browsers to hide, or disable, frame and iframe parts of this URL.\nSame Origin Only: Specifies that the browser may load the frame or iframe if the referring page is from the same protocol, port, and domain as this URL. This limits the user to navigate only within the same web application.\nOnly From URL: Specifies that the browser may load the frame or iframe from a specified domain. Type the protocol and domain in URL format for example, http://www.mywebsite.com. Do not enter a sub-URL, such as http://www.mywebsite.com/index.",
                  "enum" : [
                     "only-from",
                     "only-same",
                     "never"
                  ],
                  "type" : "string"
               },
               "allowRenderingInFramesOnlyFrom" : {
                  "description" : "Specifies that the browser may load the frame or iframe from a specified domain. Type the protocol and domain in URL format for example, http://www.mywebsite.com. Do not enter a sub-URL, such as http://www.mywebsite.com/index.",
                  "type" : "string"
               },
               "attackSignaturesCheck" : {
                  "description" : "Specifies, when true, that you want attack signatures and threat campaigns to be detected on this URL and possibly override the security policy settings of an attack signature or threat campaign specifically for this URL. After you enable this setting, the system displays a list of attack signatures and threat campaigns.",
                  "type" : "boolean"
               },
               "canChangeDomainCookie" : {
                  "type" : "boolean"
               },
               "clickjackingProtection" : {
                  "description" : "Specifies that the system adds the X-Frame-Options header to the domain URL\u2019s response header. This is done to protect the web application against clickjacking. Clickjacking occurs when an attacker lures a user to click illegitimate frames and iframes because the attacker hid them on legitimate visible website buttons. Therefore, enabling this option protects the web application from other web sites hiding malicious code behind them. The default is disabled. After you enable this option, you can select whether, and under what conditions, the browser should allow this URL to be rendered in a frame or iframe.",
                  "type" : "boolean"
               },
               "description" : {
                  "description" : "Describes the URL (optional).",
                  "type" : "string"
               },
               "disallowFileUploadOfExecutables" : {
                  "type" : "boolean"
               },
               "dynamicFlows" : {
                  "items" : {
                     "properties" : {
                        "prefix" : {
                           "type" : "string"
                        },
                        "regexp" : {
                           "type" : "string"
                        },
                        "suffix" : {
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "regexp",
                        "suffix",
                        "prefix"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "flowsToThisUrlCheck" : {
                  "type" : "boolean"
               },
               "html5CrossOriginRequestsEnforcement" : {
                  "description" : "The system extracts the Origin (domain) of the request from the Origin header.",
                  "properties" : {
                     "allowCredentials" : {
                        "description" : "Specifies whether requests from other web applications hosted in different domains may include user credentials.",
                        "type" : "boolean"
                     },
                     "allowOriginsEnforcementMode" : {
                        "description" : "Allows you to specify a list of origins allowed to share data returned by this URL.",
                        "enum" : [
                           "unmodified",
                           "replace-with"
                        ],
                        "type" : "string"
                     },
                     "checkAllowedHeaders" : {
                        "description" : "Allows you to specify a list of request headers that other web applications hosted in different domains can use when requesting this URL. Or you can delete non-simple headers returned in response to requests.",
                        "type" : "boolean"
                     },
                     "checkAllowedMethods" : {
                        "description" : "Allows you to specify a list of methods that other web applications hosted in different domains can use when requesting this URL.",
                        "type" : "boolean"
                     },
                     "checkCredentials" : {
                        "description" : "If *false*, requests from other web applications hosted in different domains are not allowed to include user credentials.",
                        "type" : "boolean"
                     },
                     "checkExposedHeaders" : {
                        "description" : "Optionally, for Exposed Headers, select Replace with, then specify the headers that JavaScript can expose and share with other applications when requesting this URL from another domain.\nExposed headers are the headers the server returns in the response. For example, to discover server side web application technology, type X-Powered-By.",
                        "type" : "boolean"
                     },
                     "checkMaximumAge" : {
                        "description" : "Optionally, for Maximum Age, select Replace with, then specify the number of seconds that the results of a preflight request can be cached or use the default.",
                        "type" : "boolean"
                     },
                     "crossDomainAllowedHeader" : {
                        "items" : {
                           "properties" : {
                              "allowedHeaderName" : {
                                 "description" : "Optionally, for Allowed Headers, select Replace with, then type the headers that other applications can use when requesting this URL from another domain.",
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "allowedHeaderName"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "crossDomainAllowedMethod" : {
                        "description" : "Allows you to specify a list of methods that other web applications hosted in different domains can use when requesting this URL.",
                        "items" : {
                           "properties" : {
                              "methodName" : {
                                 "description" : "Optionally, for Allowed Methods, specify which methods other applications may use when requesting this URL from another domain.",
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "methodName"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "crossDomainAllowedOrigin" : {
                        "description" : "Allows you to specify a list of origins allowed to share data returned by this URL.",
                        "items" : {
                           "properties" : {
                              "includeSubDomains" : {
                                 "description" : "If *true*, sub-domains of the allowed origin are also allowed to receive data from your web application.",
                                 "type" : "boolean"
                              },
                              "originName" : {
                                 "description" : "Type the domain name or IP address with which the URL can share data.\nWildcards are allowed in the names. For example: *.f5.com will match b.f5.com; however it will not match a.b.f5.com.",
                                 "type" : "string"
                              },
                              "originPort" : {
                                 "description" : "Select the port that other web applications can use to request data from your web application, or use the * wildcard for all ports.",
                                 "type" : "string"
                              },
                              "originProtocol" : {
                                 "description" : "Select the appropriate protocol for the allowed origin.",
                                 "enum" : [
                                    "http",
                                    "http/https",
                                    "https"
                                 ],
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "originPort",
                              "originProtocol",
                              "originName"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "crossDomainExposedHeader" : {
                        "description" : "Exposed headers are the headers the server returns in the response. For example, to discover server side web application technology, type X-Powered-By.",
                        "items" : {
                           "properties" : {
                              "exposedHeaderName" : {
                                 "description" : "Optionally, for Exposed Headers, select Replace with, then specify the headers that JavaScript can expose and share with other applications when requesting this URL from another domain.",
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "exposedHeaderName"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "enforcementMode" : {
                        "description" : "Specify the option to determine how to handle CORS requests.\nDisabled: Do nothing related to cross-domain requests. Pass CORS requests exactly as set by the server.\nRemove all CORS headers: Remove all CORS headers from the response. The response is sent to the browser, and the browser does not allow cross-origin requests.\nReplace CORS headers: Replace the CORS header in the response with another header specified on the tab, including allowed origins, allowed methods, allowed headers, and so on. The browser enforces the policy. Then after Replace with specify the protocol, origin, and port for replacing CORS headers.\nEnforce on the system: Allow cross-origin resource sharing as configured in the Allowed Origins setting. CORS requests are allowed from the domains specified as allowed origins. The system enforces the policy. Specify the protocol, origin, and port of allowed origins",
                        "enum" : [
                           "disabled",
                           "replace-headers",
                           "enforce",
                           "remove-all-headers"
                        ],
                        "type" : "string"
                     },
                     "maximumAge" : {
                        "description" : "Specifies how long (in seconds) to cache in the browser the results of a preflight request (a special request that the browser sends to your web application to determine if JavaScript from another domain may access your resource).",
                        "type" : "integer"
                     }
                  },
                  "type" : "object"
               },
               "inClassification" : {
                  "type" : "boolean"
               },
               "isAllowed" : {
                  "description" : "If *true*, the URLs allowed by the security policy.",
                  "type" : "boolean"
               },
               "isEntryPoint" : {
                  "type" : "boolean"
               },
               "mandatoryBody" : {
                  "description" : "A request body is mandatory. This is relevant for any method acting as POST.",
                  "type" : "boolean"
               },
               "metacharOverrides" : {
                  "description" : "To allow or disallow specific meta characters in the name of this specific URL (and thus override the global meta character settings).",
                  "items" : {
                     "properties" : {
                        "isAllowed" : {
                           "description" : "If *true*, metacharacters and other characters are allowed in a URL.",
                           "type" : "boolean"
                        },
                        "metachar" : {
                           "description" : "ASCII representation of the character in Hex format",
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "metachar"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "metacharsOnUrlCheck" : {
                  "description" : "Specifies, when true, that you want meta characters to be detected on this URL and possibly override the security policy settings of a meta character specifically for this URL. After you enable this setting, the system displays a list of meta characters.",
                  "type" : "boolean"
               },
               "method" : {
                  "description" : "Unique ID of a URL with a protocol type and name. Select a Method for the URL to create an API endpoint: URL + Method.",
                  "enum" : [
                     "X-MS-ENUMATTS",
                     "MKWORKSPACE",
                     "UNLINK",
                     "UNLOCK",
                     "MKCOL",
                     "SEARCH",
                     "LOCK",
                     "TRACK",
                     "POST",
                     "MOVE",
                     "DELETE",
                     "REPORT",
                     "BCOPY",
                     "GET",
                     "RPC_IN_DATA",
                     "COPY",
                     "OPTIONS",
                     "PROPFIND",
                     "PUT",
                     "ACL",
                     "SUBSCRIBE",
                     "BPROPFIND",
                     "RPC_OUT_DATA",
                     "BMOVE",
                     "PATCH",
                     "BDELETE",
                     "HEAD",
                     "CHECKOUT",
                     "VERSION_CONTROL",
                     "NOTIFY",
                     "UNSUBSCRIBE",
                     "BPROPPATCH",
                     "PROPPATCH",
                     "TRACE",
                     "MERGE",
                     "CONNECT",
                     "LINK",
                     "POLL",
                     "CHECKIN",
                     "*"
                  ],
                  "type" : "string"
               },
               "methodOverrides" : {
                  "description" : "Specifies a list of methods that are allowed or disallowed for a specific URL. The list overrides the list of methods allowed or disallowed globally at the policy level.",
                  "items" : {
                     "properties" : {
                        "allowed" : {
                           "description" : "Specifies that the system allows you to override allowed methods for this URL. When selected, the global policy settings for methods are listed, and you can change what is allowed or disallowed for this URL.",
                           "type" : "boolean"
                        },
                        "method" : {
                           "description" : "Specifies a list of existing HTTP methods. All security policies accept standard HTTP methods by default.",
                           "enum" : [
                              "BPROPFIND",
                              "RPC_OUT_DATA",
                              "PROPPATCH",
                              "BMOVE",
                              "X-MS-ENUMATTS",
                              "PATCH",
                              "BCOPY",
                              "GET",
                              "RPC_IN_DATA",
                              "MKWORKSPACE",
                              "TRACE",
                              "MERGE",
                              "LINK",
                              "CONNECT",
                              "UNLINK",
                              "POLL",
                              "UNLOCK",
                              "MKCOL",
                              "SEARCH",
                              "CHECKIN",
                              "LOCK",
                              "BDELETE",
                              "COPY",
                              "HEAD",
                              "TRACK",
                              "CHECKOUT",
                              "OPTIONS",
                              "VERSION_CONTROL",
                              "NOTIFY",
                              "POST",
                              "PROPFIND",
                              "UNSUBSCRIBE",
                              "MOVE",
                              "DELETE",
                              "PUT",
                              "ACL",
                              "SUBSCRIBE",
                              "REPORT",
                              "BPROPPATCH"
                           ],
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "method"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "methodsOverrideOnUrlCheck" : {
                  "description" : "Specifies, when true, that you want methods to be detected on this URL and possibly override the security policy settings of a method specifically for this URL. After you enable this setting, the system displays a list of methods.",
                  "type" : "boolean"
               },
               "name" : {
                  "description" : "Specifies an HTTP URL that the security policy allows. The available types are:\n- **Explicit**: Specifies that the URL has a specific name and is not a wildcard entity. Type the name of a URL exactly as you expect it to appear in the request.\n- **Wildcard**: Specifies that any URL that matches the listed wildcard expression should be treated according to the wildcard attributes. Type a wildcard expression that matches the expected URL. For example, entering the wildcard expression * specifies that any URL is allowed by the security policy.\nThe syntax for wildcard entities is based on shell-style wildcard characters. This table lists the wildcard characters that you can use so that the entity name can match multiple objects.\n| Wildcard Character | Matches                              |\n|--------------------+--------------------------------------|\n| *                  | All characters                       |\n| ?                  | Any single character                 |\n| [abcde]            | Exactly one of the characters listed |\n| [!abcde]           | Any character not listed             |\n| [a-e]              | Exactly one character in the range   |\n| [!a-e]             | Any character not in the range       |\n**Note**: Wildcards do not match regular expressions. Do not use a regular expression as a wildcard.",
                  "type" : "string"
               },
               "operationId" : {
                  "description" : "The attribute operationId is used as an OpenAPI endpint identifier.",
                  "type" : "string"
               },
               "positionalParameters" : {
                  "description" : "When checked (enabled), positional parameters are enabled in the URL.",
                  "items" : {
                     "properties" : {
                        "parameter" : {
                           "$ref" : "#/properties/parameters/items",
                           "type" : "object"
                        },
                        "urlSegmentIndex" : {
                           "description" : "Select which to add: Text or Parameter and enter your desired segments. You can add multiple text and parameter segments.",
                           "type" : "integer"
                        }
                     },
                     "required" : [
                        "urlSegmentIndex",
                        "parameter"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "protocol" : {
                  "description" : "Specifies whether the protocol for the URL is HTTP or HTTPS.",
                  "enum" : [
                     "https",
                     "http"
                  ],
                  "type" : "string"
               },
               "signatureOverrides" : {
                  "description" : "Array of signature overrides.\nSpecifies attack signatures whose security policy settings are overridden for this URL, and which action the security policy takes when it discovers a request for this URL that matches these attack signatures.",
                  "items" : {
                     "properties" : {
                        "enabled" : {
                           "description" : "Specifies, when true, that the overridden signature is enforced",
                           "type" : "boolean"
                        },
                        "signatureId" : {
                           "description" : "signature id",
                           "type" : "integer"
                        }
                     },
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "type" : {
                  "description" : "Determines the type of the **name** attribute. Only when setting the type to wildcard will the special wildcard characters in the name be interpreted as such.",
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               },
               "urlContentProfiles" : {
                  "description" : "Specifies how the system recognizes and enforces requests for this URL according to the requests\u2019 header content. The system automatically creates a default header-based content profile for HTTP, and you cannot delete it. However, requests for a URL may contain other types of content, such as JSON, XML, or other proprietary formats.",
                  "items" : {
                     "properties" : {
                        "contentProfile" : {
                           "properties" : {
                              "name" : {
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "name"
                           ],
                           "type" : "object"
                        },
                        "headerName" : {
                           "description" : "Specifies an explicit header name that must appear in requests for this URL. This field is not case-sensitive.",
                           "type" : "string"
                        },
                        "headerOrder" : {
                           "description" : "Displays the order in which the system checks header content of requests for this URL.",
                           "type" : "string"
                        },
                        "headerValue" : {
                           "description" : "Specifies a simple pattern string (glob pattern matching) for the header value that must appear in legal requests for this URL; for example, *json*, xml_method?, or method[0-9]. If the header includes this pattern, the system assumes the request contains the type of data you select in the Request Body Handling setting. This field is case-sensitive.",
                           "type" : "string"
                        },
                        "type" : {
                           "description" : "Apply Content Signatures: Do not parse the content; scan the entire payload with full-content attack signatures.\nApply Value and Content Signatures: Do not parse the content or extract parameters; process the entire payload with value and full-content attack signatures.\nDisallow: Block requests for an URL containing this header content. Log the Illegal Request Content Type violation.\nDo Nothing: Do not inspect or parse the content. Handle the header of the request as specified by the security policy.\nForm Data: Parse content as posted form data in either URL-encoded or multi-part formats. Enforce the form parameters according to the policy.\nGWT: Perform checks for data in requests, based on the configuration of the GWT (Google Web Toolkit) profile associated with this URL.\nJSON: Review JSON data using an associated JSON profile, and use value attack signatures to scan the element values.\nXML: Review XML data using an associated XML profile.",
                           "enum" : [
                              "form-data",
                              "do-nothing",
                              "xml",
                              "gwt",
                              "apply-value-and-content-signatures",
                              "apply-content-signatures",
                              "json",
                              "disallow"
                           ],
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "headerName",
                        "headerValue"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "urlIsReferrer" : {
                  "type" : "boolean"
               },
               "wildcardIncludesSlash" : {
                  "description" : "Specifies that an asterisk in a wildcard URL matches any number of path segments (separated by slashes); when cleared, specifies that an asterisk matches at most one segment. For example: the wildcard /art/* matches /art/abc/index.html if the wildcard match includes slashes (default value), but does not match it if the check box is cleared. In that case, it matches /art/go.html (only one segment below /art).",
                  "type" : "boolean"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "vulnerability-assessment" : {
         "properties" : {
            "apiAuthenticationKey" : {
               "type" : "string"
            },
            "learnFromResponses" : {
               "type" : "boolean"
            },
            "responseStatusCodes" : {
               "items" : {
                  "type" : "string"
               },
               "type" : "array"
            },
            "scanStatus" : {
               "enum" : [
                  "registration-requested",
                  "scan-completed",
                  "registration-completed"
               ],
               "type" : "string"
            },
            "scannerSiteName" : {
               "type" : "string"
            },
            "scannerType" : {
               "enum" : [
                  "hp-webinspect",
                  "qualys",
                  "ibm-appscan",
                  "immuniweb",
                  "whitehat-sentinel-european",
                  "whitehat-sentinel",
                  "none",
                  "generic",
                  "quotium-seeker",
                  "trustwave"
               ],
               "type" : "string"
            },
            "shareSiteMap" : {
               "type" : "boolean"
            },
            "syncDayOfMonth" : {
               "type" : "integer"
            },
            "syncDayOfWeek" : {
               "type" : "integer"
            },
            "syncFrequency" : {
               "enum" : [
                  "daily",
                  "monthly",
                  "weekly",
                  "never"
               ],
               "type" : "string"
            },
            "syncHour" : {
               "type" : "integer"
            },
            "trustAllIps" : {
               "type" : "boolean"
            },
            "trustedTrafficLoosen" : {
               "properties" : {
                  "differentSources" : {
                     "type" : "integer"
                  },
                  "maxDaysBetweenSamples" : {
                     "type" : "number"
                  },
                  "minHoursBetweenSamples" : {
                     "type" : "number"
                  }
               },
               "type" : "object"
            },
            "untrustedTrafficLoosen" : {
               "properties" : {
                  "differentSources" : {
                     "type" : "integer"
                  },
                  "maxDaysBetweenSamples" : {
                     "type" : "number"
                  },
                  "minHoursBetweenSamples" : {
                     "type" : "number"
                  }
               },
               "type" : "object"
            }
         },
         "type" : "object"
      },
      "webhooks" : {
         "items" : {
            "properties" : {
               "body" : {
                  "type" : "string"
               },
               "contentType" : {
                  "type" : "string"
               },
               "name" : {
                  "type" : "string"
               },
               "triggerEvent" : {
                  "enum" : [
                     "incident-start",
                     "apply-policy",
                     "incident-end",
                     "http-request-illegal",
                     "apply-policy-failed",
                     "http-request-needing-examination",
                     "http-request-likely-malicious"
                  ],
                  "type" : "string"
               },
               "url" : {
                  "type" : "string"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "websocket-urls" : {
         "items" : {
            "properties" : {
               "allowBinaryMessage" : {
                  "type" : "boolean"
               },
               "allowJsonMessage" : {
                  "type" : "boolean"
               },
               "allowTextMessage" : {
                  "type" : "boolean"
               },
               "binaryMessageMaxSize" : {
                  "type" : "integer"
               },
               "checkBinaryMessageMaxSize" : {
                  "type" : "boolean"
               },
               "checkMessageFrameMaxCount" : {
                  "type" : "boolean"
               },
               "checkMessageFrameMaxSize" : {
                  "type" : "boolean"
               },
               "checkPayload" : {
                  "type" : "boolean"
               },
               "description" : {
                  "type" : "string"
               },
               "extension" : {
                  "enum" : [
                     "remove",
                     "block",
                     "ignore"
                  ],
                  "type" : "string"
               },
               "html5CrossOriginRequestsEnforcement" : {
                  "properties" : {
                     "crossDomainAllowedOrigin" : {
                        "items" : {
                           "properties" : {
                              "includeSubDomains" : {
                                 "type" : "boolean"
                              },
                              "originName" : {
                                 "type" : "string"
                              },
                              "originPort" : {
                                 "type" : "string"
                              },
                              "originProtocol" : {
                                 "enum" : [
                                    "http",
                                    "http/https",
                                    "https"
                                 ],
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "originPort",
                              "originProtocol",
                              "originName"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "enforcementMode" : {
                        "enum" : [
                           "disabled",
                           "enforce",
                           "remove-all-headers"
                        ],
                        "type" : "string"
                     }
                  },
                  "type" : "object"
               },
               "inClassification" : {
                  "type" : "boolean"
               },
               "isAllowed" : {
                  "type" : "boolean"
               },
               "jsonProfile" : {
                  "$ref" : "#/properties/json-profiles/items",
                  "type" : "object"
               },
               "messageFrameMaxCount" : {
                  "type" : "integer"
               },
               "messageFrameMaxSize" : {
                  "type" : "integer"
               },
               "metacharOverrides" : {
                  "items" : {
                     "properties" : {
                        "isAllowed" : {
                           "type" : "boolean"
                        },
                        "metachar" : {
                           "description" : "hexidecimal value",
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "metachar"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "metacharsOnWebsocketUrlCheck" : {
                  "type" : "boolean"
               },
               "name" : {
                  "type" : "string"
               },
               "plainTextProfile" : {
                  "$ref" : "#/properties/plain-text-profiles/items",
                  "type" : "object"
               },
               "protocol" : {
                  "enum" : [
                     "wss",
                     "ws"
                  ],
                  "type" : "string"
               },
               "type" : {
                  "enum" : [
                     "wildcard",
                     "explicit"
                  ],
                  "type" : "string"
               },
               "unsupportedExtensions" : {
                  "enum" : [
                     "remove",
                     "block",
                     "ignore"
                  ],
                  "type" : "string"
               },
               "wildcardIncludesSlash" : {
                  "type" : "boolean"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "whitelist-ips" : {
         "items" : {
            "properties" : {
               "blockRequests" : {
                  "enum" : [
                     "policy-default",
                     "always",
                     "never"
                  ],
                  "type" : "string"
               },
               "description" : {
                  "type" : "string"
               },
               "ignoreAnomalies" : {
                  "type" : "boolean"
               },
               "ignoreIpReputation" : {
                  "type" : "boolean"
               },
               "ipAddress" : {
                  "type" : "string"
               },
               "ipMask" : {
                  "type" : "string"
               },
               "neverLearnRequests" : {
                  "type" : "boolean"
               },
               "neverLogRequests" : {
                  "type" : "boolean"
               },
               "trustedByPolicyBuilder" : {
                  "type" : "boolean"
               }
            },
            "required" : [
               "ipAddress",
               "ipMask"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "xml-profiles" : {
         "items" : {
            "properties" : {
               "attachmentsInSoapMessages" : {
                  "type" : "boolean"
               },
               "attackSignaturesCheck" : {
                  "type" : "boolean"
               },
               "defenseAttributes" : {
                  "properties" : {
                     "allowCDATA" : {
                        "type" : "boolean"
                     },
                     "allowDTDs" : {
                        "type" : "boolean"
                     },
                     "allowExternalReferences" : {
                        "type" : "boolean"
                     },
                     "allowProcessingInstructions" : {
                        "type" : "boolean"
                     },
                     "maximumAttributeValueLength" : {
                        "type" : "string"
                     },
                     "maximumAttributesPerElement" : {
                        "type" : "string"
                     },
                     "maximumChildrenPerElement" : {
                        "type" : "string"
                     },
                     "maximumDocumentDepth" : {
                        "type" : "string"
                     },
                     "maximumDocumentSize" : {
                        "type" : "string"
                     },
                     "maximumElements" : {
                        "type" : "string"
                     },
                     "maximumNSDeclarations" : {
                        "type" : "string"
                     },
                     "maximumNameLength" : {
                        "type" : "string"
                     },
                     "maximumNamespaceLength" : {
                        "type" : "string"
                     },
                     "tolerateCloseTagShorthand" : {
                        "type" : "boolean"
                     },
                     "tolerateLeadingWhiteSpace" : {
                        "type" : "boolean"
                     },
                     "tolerateNumericNames" : {
                        "type" : "boolean"
                     }
                  },
                  "type" : "object"
               },
               "description" : {
                  "type" : "string"
               },
               "enableWss" : {
                  "type" : "boolean"
               },
               "followSchemaLinks" : {
                  "type" : "boolean"
               },
               "inspectSoapAttachments" : {
                  "type" : "boolean"
               },
               "isDefault" : {
                  "type" : "boolean"
               },
               "isReferenced" : {
                  "type" : "boolean"
               },
               "metacharAttributeCheck" : {
                  "type" : "boolean"
               },
               "metacharElementCheck" : {
                  "type" : "boolean"
               },
               "metacharOverrides" : {
                  "items" : {
                     "properties" : {
                        "isAllowed" : {
                           "type" : "boolean"
                        },
                        "metachar" : {
                           "description" : "hexidecimal value",
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "metachar"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "name" : {
                  "type" : "string"
               },
               "sensitiveData" : {
                  "items" : {
                     "properties" : {
                        "namespace" : {
                           "type" : "string"
                        },
                        "paramName" : {
                           "type" : "string"
                        },
                        "paramType" : {
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "paramName",
                        "paramType",
                        "namespace"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "signatureOverrides" : {
                  "items" : {
                     "properties" : {
                        "enabled" : {
                           "type" : "boolean"
                        },
                        "signatureId" : {
                           "type" : "integer"
                        }
                     },
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "soapMethods" : {
                  "items" : {
                     "properties" : {
                        "action" : {
                           "type" : "string"
                        },
                        "isAllowed" : {
                           "type" : "boolean"
                        },
                        "name" : {
                           "type" : "string"
                        },
                        "namespace" : {
                           "type" : "string"
                        }
                     },
                     "required" : [
                        "namespace",
                        "name"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "useXmlResponsePage" : {
                  "type" : "boolean"
               },
               "validationFiles" : {
                  "items" : {
                     "properties" : {
                        "importUrl" : {
                           "type" : "string"
                        },
                        "isPrimary" : {
                           "type" : "boolean"
                        },
                        "xmlValidationFile" : {
                           "$ref" : "#/properties/xml-validation-files/items",
                           "type" : "object"
                        }
                     },
                     "required" : [
                        "importUrl",
                        "xmlValidationFile"
                     ],
                     "type" : "object"
                  },
                  "type" : "array"
               },
               "validationSoapActionHeader" : {
                  "type" : "boolean"
               },
               "wssConfiguration" : {
                  "properties" : {
                     "addTimestamp" : {
                        "type" : "boolean"
                     },
                     "applyActionToDefinedRequestElements" : {
                        "type" : "boolean"
                     },
                     "applyActionToDefinedResponseElements" : {
                        "type" : "boolean"
                     },
                     "applyActionToEntireResponseBodyValue" : {
                        "type" : "boolean"
                     },
                     "clientCertificateReferences" : {
                        "items" : {
                           "properties" : {
                              "name" : {
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "name"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "decryptAll" : {
                        "type" : "boolean"
                     },
                     "elements" : {
                        "items" : {
                           "properties" : {
                              "applyTo" : {
                                 "enum" : [
                                    "request",
                                    "response"
                                 ],
                                 "type" : "string"
                              },
                              "encryptedPart" : {
                                 "enum" : [
                                    "content",
                                    "element"
                                 ],
                                 "type" : "string"
                              },
                              "xPathName" : {
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "applyTo",
                              "xPathName"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "enableRequestRole" : {
                        "type" : "boolean"
                     },
                     "enableResponseRole" : {
                        "type" : "boolean"
                     },
                     "encryptionAlgorithm" : {
                        "enum" : [
                           "tripledes",
                           "aes256",
                           "aes128"
                        ],
                        "type" : "string"
                     },
                     "enforceTimestampInRequest" : {
                        "type" : "boolean"
                     },
                     "keyTransportAlgorithm" : {
                        "enum" : [
                           "rsa-oaep",
                           "rsa-1_5"
                        ],
                        "type" : "string"
                     },
                     "maxTimestampInterval" : {
                        "type" : "integer"
                     },
                     "name" : {
                        "type" : "string"
                     },
                     "namespaceMapping" : {
                        "items" : {
                           "properties" : {
                              "namespace" : {
                                 "type" : "string"
                              },
                              "prefix" : {
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "prefix"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "responseAction" : {
                        "enum" : [
                           "encrypt-then-sign",
                           "sign",
                           "sign-then-encrypt",
                           "encrypt"
                        ],
                        "type" : "string"
                     },
                     "roles" : {
                        "items" : {
                           "properties" : {
                              "applyTo" : {
                                 "enum" : [
                                    "request",
                                    "response"
                                 ],
                                 "type" : "string"
                              },
                              "role" : {
                                 "enum" : [
                                    "none",
                                    "next",
                                    "ultimateReceiver"
                                 ],
                                 "type" : "string"
                              }
                           },
                           "required" : [
                              "applyTo",
                              "role"
                           ],
                           "type" : "object"
                        },
                        "type" : "array"
                     },
                     "signatureAlgorithm" : {
                        "enum" : [
                           "hmac-sha1",
                           "rsa-sha1"
                        ],
                        "type" : "string"
                     },
                     "soapBodyInRequestMustBeSignedAndVerified" : {
                        "type" : "boolean"
                     },
                     "verifyAll" : {
                        "type" : "boolean"
                     }
                  },
                  "type" : "object"
               }
            },
            "required" : [
               "name"
            ],
            "type" : "object"
         },
         "type" : "array"
      },
      "xml-validation-files" : {
         "items" : {
            "properties" : {
               "contents" : {
                  "type" : "string"
               },
               "fileName" : {
                  "type" : "string"
               },
               "isBase64" : {
                  "type" : "boolean"
               },
               "isReferenced" : {
                  "type" : "boolean"
               }
            },
            "required" : [
               "contents",
               "fileName"
            ],
            "type" : "object"
         },
         "type" : "array"
      }
   },
   "required" : [
      "name",
      "template"
   ]
}
